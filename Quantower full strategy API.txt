Quantower full strategy API

Class Strategy
The base class for strategies

Namespace: TradingPlatform.BusinessLayer
Syntax
public abstract class Strategy : ExecutionEntity
Constructors
Strategy()
The base class for strategies

Declaration
protected Strategy()
Properties
Id
Unique ID of the strategy

Declaration
public string Id { get; }
Property Value
Type	Description
string	
InstanceName
The base class for strategies

Declaration
public string InstanceName { get; set; }
Property Value
Type	Description
string	
MonitoringConnectionsIds
The base class for strategies

Declaration
public virtual string[] MonitoringConnectionsIds { get; }
Property Value
Type	Description
string[]	
NewVersionAvailable
The base class for strategies

Declaration
public bool NewVersionAvailable { get; }
Property Value
Type	Description
bool	
Settings
The base class for strategies

Declaration
public override IList<SettingItem> Settings { get; set; }
Property Value
Type	Description
IList<SettingItem>	
Overrides
ExecutionEntity.Settings
State
The current state of the strategy

Declaration
public StrategyState State { get; }
Property Value
Type	Description
StrategyState	
Methods
GetConnectionStateDependency()
The base class for strategies

Declaration
public ConnectionDependency GetConnectionStateDependency()
Returns
Type	Description
ConnectionDependency	
GetLogs(DateTime, DateTime)
Get logs from the strategy for specified date range

Declaration
public LoggerEvent[] GetLogs(DateTime from, DateTime to)
Parameters
Type	Name	Description
DateTime	from	
DateTime	to	
Returns
Type	Description
LoggerEvent[]	
GetMetrics()
Get current metrics from the strategy

Declaration
public List<StrategyMetric> GetMetrics()
Returns
Type	Description
List<StrategyMetric>	
Log(string, StrategyLoggingLevel)
Write log message

Declaration
protected void Log(string message, StrategyLoggingLevel level = StrategyLoggingLevel.Info)
Parameters
Type	Name	Description
string	message	
StrategyLoggingLevel	level	
OnCreated()
The base class for strategies

Declaration
protected virtual void OnCreated()
OnGetMetrics()
The base class for strategies

Declaration
protected virtual List<StrategyMetric> OnGetMetrics()
Returns
Type	Description
List<StrategyMetric>	
OnInitializeMetrics(Meter)
The base class for strategies

Declaration
protected virtual void OnInitializeMetrics(Meter meter)
Parameters
Type	Name	Description
Meter	meter	
OnRemove()
The base class for strategies

Declaration
protected virtual void OnRemove()
OnRun()
The base class for strategies

Declaration
protected virtual void OnRun()
OnStop()
The base class for strategies

Declaration
protected virtual void OnStop()
Remove()
Remove the strategy

Declaration
public void Remove()
Run()
Run strategy

Declaration
public void Run()
Stop()
Stop strategy

Declaration
public void Stop()
Events
NewLog
Event occured when strategy write a new log

Declaration
public event StrategyEventHandler NewLog
Event Type
Type	Description
StrategyEventHandler	
SettingsChanged
Event occured if any of strategy settings was changed

Declaration
public event Action<Strategy> SettingsChanged
Event Type
Type	Description
Action<Strategy>

Class StrategyMetric
Namespace: TradingPlatform.BusinessLayer
Syntax
public class StrategyMetric
Properties
FormattedValue
Declaration
public string FormattedValue { get; set; }
Property Value
Type	Description
string	
Name
Declaration
public string Name { get; set; }
Property Value
Type	Description
string	
Methods
FromXElement(XElement, DeserializationInfo)
Declaration
public void FromXElement(XElement element, DeserializationInfo deserializationInfo)
Parameters
Type	Name	Description
XElement	element	
DeserializationInfo	deserializationInfo	
ToXElement()
Declaration
public XElement ToXElement()
Returns
Type	Description
XElement	

Namespace TradingPlatform.BusinessLayer
Classes
Account
Contains all user's account information

Asset
Defines asset entity

BuiltInIndicators
CancelOrderRequestParameters
ClosePositionRequestParameters
Connection
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

ConnectionInfo
Represents all needed parameters for the connection constructing process.

Core
The main entry point in the API. Core keeps access to all business logic entities and their properties: connections, accounts, symbols, positions, orders, etc. Some of them can be reached through using managers or directly via specified collections. You can always access the Core object via static Core.Instance property.

CorporateAction
Represents information about corporate action.

CryptoAccount
CryptoAssetBalances
DOMQuote
Represent access to DOM2 quote, which contains Bids and Asks.

DayBar
Represent access to DayBar quote, which contains summary information about instrument prices.

DepthOfMarket
Represent access to level2 data.

DepthOfMarketAggregatedCollections
Leve2 data. Contains Bids and Ask collections

Exchange
Contains all information which belong to the given exchange

GetDepthOfMarketParameters
Represent parameters of DepthOfMarket

GetLevel2ItemsParameters
Represent parameters of request for Leve2Item collection

GetSymbolRequestParameters
HistoricalData
Represent access to historical data information and indicators control.

HistoryAggregation
HistoryAggregationHeikenAshi
HistoryAggregationKagi
HistoryAggregationLineBreak
HistoryAggregationPointsAndFigures
HistoryAggregationRangeBars
HistoryAggregationRenko
HistoryAggregationTick
HistoryAggregationTime
HistoryItemBar
Represents historical data bar item

HistoryItemLast
Represents historical data trade item

HistoryItemTick
Represents historical data tick item

HistoryRequestParameters
Resolves a history request parameters per symbol

Indicator
Base class for all indicators.

InputParameterAttribute
Use this attribute to mark input parameters of your script. You will see them in the settings screen on adding

Last
Represent access to trade information.

Level2Item
Represent access to level2 item.

Level2Quote
Represent access to Level2 quote.

Mark
ModifyOrderRequestParameters
Order
Represents trading information about pending order

OrderRequestParameters
OrdersHistoryRequestParameters
PaintChartEventArgs
PlaceOrderRequestParameters
PnLRequestParameters
Position
Represents trading information about related position

Quote
Represent access to quote information.

ReportRequestParameters
RequestParameters
SettingItemAction
Typecasts setting as Button item

SettingItemBoolean
Typecasts setting as CheckBox item

SettingItemColor
Typecasts setting as Color item

SettingItemDouble
Typecasts setting as NumericUpDown item

SettingItemGroup
Typecasts setting as TabControl item

SettingItemInteger
Typecasts setting as NumericUpDown item

SettingItemLong
SettingItemPeriod
Typecasts setting as Period item

SettingItemSelector
Typecasts setting as ComboBox item

SettingItemSeparatorGroup
Typecasts setting as GroupBox item

SettingItemString
Typecasts setting as TextBox item

Strategy
The base class for strategies

StrategyMetric
Symbol
Represent access to symbol information and properties.

SymbolGroup
Provides possibility to group and sort symbols for each connection

Trade
Represents information about trade.

TradesHistoryRequestParameters
TradingRequestParameters
VolumeAnalysisCalculationParameters
Provides VA calculation parameters

VolumeAnalysisCalculationRequest
Provides VA calculation request per Symbol

VolumeAnalysisData
VolumeAnalysisDataEventArgs
VolumeAnalysisItem
Represent item with Volume Analysis calculation results

VolumeAnalysisManager
Volume Analysis calculations

Structs
Period
Represents mechanism for supporting predefined and custom periods

Interfaces
IVolumeAnalysisCalculationProgress
IVolumeAnalysisCalculationTask
Enums
AggregateMethod
Aggregation method

BasePeriod
Period that can be used as a basis for history aggregations

LineStyle
Specifies the style of indicator line.

MaMode
Moving average mode

PointsAndFiguresStyle
PriceType
RenkoStyle
StrategyLoggingLevel
StrategyState
VolumeAnalysisCalculationState
VolumeAnalysisField

Class Account
Contains all user's account information

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Account : BusinessObject
Properties
AccountCurrency
Gets base currency of account. Account CCY is always equal to the server CCY in AlgoStudio

Declaration
public Asset AccountCurrency { get; }
Property Value
Type	Description
Asset	
Balance
Gets current balance of the account.

Declaration
public double Balance { get; }
Property Value
Type	Description
double	
Id
Gets account unique code.

Declaration
public string Id { get; }
Property Value
Type	Description
string	
Name
Obtaining account name.

Declaration
public string Name { get; }
Property Value
Type	Description
string	
NettingType
Contains all user's account information

Declaration
public NettingType NettingType { get; set; }
Property Value
Type	Description
NettingType	
Methods
CompareTo(object)
Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.

Declaration
public int CompareTo(object obj)
Parameters
Type	Name	Description
object	obj	
An object to compare with this instance.

Returns
Type	Description
int	
A value that indicates the relative order of the objects being compared. The return value has these meanings:

Value	Meaning
Less than zero	This instance precedes obj in the sort order.
Zero	This instance occurs in the same position in the sort order as obj.
Greater than zero	This instance follows obj in the sort order.
Exceptions
Type	Condition
ArgumentException	
obj is not the same type as this instance.

CompareTo(Account)
Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.

Declaration
public int CompareTo(Account other)
Parameters
Type	Name	Description
Account	other	
An object to compare with this instance.

Returns
Type	Description
int	
A value that indicates the relative order of the objects being compared. The return value has these meanings:

Value	Meaning
Less than zero	This instance precedes other in the sort order.
Zero	This instance occurs in the same position in the sort order as other.
Greater than zero	This instance follows other in the sort order.
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
Equals(Account)
Indicates whether the current object is equal to another object of the same type.

Declaration
public bool Equals(Account other)
Parameters
Type	Name	Description
Account	other	
An object to compare with this object.

Returns
Type	Description
bool	
true if the current object is equal to the other parameter; otherwise, false.

GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
Events
Updated
Will be triggered on each account information updating

Declaration
public event Action<Account> Updated
Event Type
Type	Description
Action<Account>	

class Asset
Defines asset entity

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Asset : BusinessObject
Properties
Description
Asset description

Declaration
public string Description { get; }
Property Value
Type	Description
string	
Id
Asset id bearer

Declaration
public string Id { get; }
Property Value
Type	Description
string	
IsoCode
Gets asset ISO 4217 code

Declaration
public string IsoCode { get; }
Property Value
Type	Description
string	
MinimumChange
Defines a number precision of the change value

Declaration
public double MinimumChange { get; set; }
Property Value
Type	Description
double	
Name
Asset name bearer

Declaration
public string Name { get; }
Property Value
Type	Description
string	
Precision
Gets precision value

Declaration
public int Precision { get; }
Property Value
Type	Description
int	
Methods
FormatPrice(double)
Formats price into precision normalized string

Declaration
public string FormatPrice(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
string	
FormatPriceWithCurrency(double)
Formats price into concatenated string which contains the precision normalized value and Asset's name

Declaration
public string FormatPriceWithCurrency(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
string	
FormatWithCurrency(double)
Defines asset entity

Declaration
public string FormatWithCurrency(double value)
Parameters
Type	Name	Description
double	value	
Returns
Type	Description
string	

Class Exchange
Contains all information which belong to the given exchange

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class Exchange : BusinessObject
Properties
ExchangeName
Gets Exchange name

Declaration
public string ExchangeName { get; }
Property Value
Type	Description
string	
Id
Gets Exchange Id

Declaration
public string Id { get; }
Property Value
Type	Description
string	
SortIndex
Used for the Exchanges comparing

Declaration
public int SortIndex { get; }
Property Value
Type	Description
int	
UniqueKey
Contains all information which belong to the given exchange

Declaration
public ExchangeKey UniqueKey { get; }
Property Value
Type	Description
ExchangeKey	
Methods
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.


Class Symbol
Represent access to symbol information and properties.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Symbol : BusinessObject
Constructors
Symbol()
Represent access to symbol information and properties.

Declaration
protected Symbol()
Fields
SPOT_SYMBOL_ID
Represent access to symbol information and properties.

Declaration
public const string SPOT_SYMBOL_ID = "spotSymbolId"
Field Value
Type	Description
string	
TRADING_SYMBOL_ID
Represent access to symbol information and properties.

Declaration
public const string TRADING_SYMBOL_ID = "TradingSymbol"
Field Value
Type	Description
string	
historyMetadata
Represent access to symbol information and properties.

Declaration
protected HistoryMetadata historyMetadata
Field Value
Type	Description
HistoryMetadata	
volumeAnalysisMetadata
Represent access to symbol information and properties.

Declaration
protected VolumeAnalysisMetadata volumeAnalysisMetadata
Field Value
Type	Description
VolumeAnalysisMetadata	
Properties
Ask
Gets Ask price

Declaration
public double Ask { get; }
Property Value
Type	Description
double	
AskSize
Gets Ask size

Declaration
public double AskSize { get; }
Property Value
Type	Description
double	
AvailableFutures
Represent access to symbol information and properties.

Declaration
public AvailableDerivatives AvailableFutures { get; }
Property Value
Type	Description
AvailableDerivatives	
AvailableOptions
Represent access to symbol information and properties.

Declaration
public AvailableDerivatives AvailableOptions { get; }
Property Value
Type	Description
AvailableDerivatives	
AvailableOptionsExchanges
Represent access to symbol information and properties.

Declaration
public Exchange[] AvailableOptionsExchanges { get; }
Property Value
Type	Description
Exchange[]	
AverageTradedPrice
Represent access to symbol information and properties.

Declaration
public double AverageTradedPrice { get; }
Property Value
Type	Description
double	
Bid
Gets Bid price

Declaration
public double Bid { get; }
Property Value
Type	Description
double	
BidSize
Gets Bid size

Declaration
public double BidSize { get; }
Property Value
Type	Description
double	
BottomPriceLimit
Represent access to symbol information and properties.

Declaration
public double BottomPriceLimit { get; }
Property Value
Type	Description
double	
Change
Gets change value between Bid/Last and Close price

Declaration
public double Change { get; }
Property Value
Type	Description
double	
ChangePercentage
Gets Change percentage value

Declaration
public double ChangePercentage { get; }
Property Value
Type	Description
double	
CurrentSessionsInfo
Represent access to symbol information and properties.

Declaration
public SessionsContainer CurrentSessionsInfo { get; }
Property Value
Type	Description
SessionsContainer	
Delta
Represent access to symbol information and properties.

Declaration
public double Delta { get; }
Property Value
Type	Description
double	
DeltaCalculationType
Represent access to symbol information and properties.

Declaration
public DeltaCalculationType DeltaCalculationType { get; }
Property Value
Type	Description
DeltaCalculationType	
DepthOfMarket
Gets Level2 data

Declaration
public DepthOfMarket DepthOfMarket { get; }
Property Value
Type	Description
DepthOfMarket	
Description
Gets symbol description

Declaration
public string Description { get; }
Property Value
Type	Description
string	
Exchange
Gets Exchange of current symbol

Declaration
public Exchange Exchange { get; protected set; }
Property Value
Type	Description
Exchange	
ExchangeId
Gets Exchange id of current symbol

Declaration
public string ExchangeId { get; }
Property Value
Type	Description
string	
ExpirationDate
Gets derivative expiration date

Declaration
public DateTime ExpirationDate { get; }
Property Value
Type	Description
DateTime	
FundingRate
Represent access to symbol information and properties.

Declaration
public double FundingRate { get; }
Property Value
Type	Description
double	
FutureContractType
Represent access to symbol information and properties.

Declaration
public FutureContractType? FutureContractType { get; }
Property Value
Type	Description
FutureContractType?	
Gamma
Represent access to symbol information and properties.

Declaration
public double Gamma { get; }
Property Value
Type	Description
double	
Group
Gets SymbolGroup

Declaration
public SymbolGroup Group { get; protected set; }
Property Value
Type	Description
SymbolGroup	
High
Gets high price

Declaration
public double High { get; }
Property Value
Type	Description
double	
HistoryType
Default history type

Declaration
public HistoryType HistoryType { get; }
Property Value
Type	Description
HistoryType	
IV
Represent access to symbol information and properties.

Declaration
public double IV { get; }
Property Value
Type	Description
double	
Id
Gets symbol Id

Declaration
public string Id { get; protected set; }
Property Value
Type	Description
string	
Last
Gets last price

Declaration
public double Last { get; }
Property Value
Type	Description
double	
LastDateTime
Gets last time

Declaration
public DateTime LastDateTime { get; }
Property Value
Type	Description
DateTime	
LastSize
Gets last size

Declaration
public double LastSize { get; }
Property Value
Type	Description
double	
LastTradingDate
Gets derivative last trading date

Declaration
public DateTime LastTradingDate { get; }
Property Value
Type	Description
DateTime	
LotSize
Amount of base asset Product for one lot.

Declaration
public double LotSize { get; }
Property Value
Type	Description
double	
LotStep
Step of the lot changes

Declaration
public double LotStep { get; }
Property Value
Type	Description
double	
Low
Gets low price

Declaration
public double Low { get; }
Property Value
Type	Description
double	
Mark
Gets mark price

Declaration
public double Mark { get; }
Property Value
Type	Description
double	
MarkSize
Gets mark size

Declaration
public double MarkSize { get; }
Property Value
Type	Description
double	
MaturityDate
Gets derivative maturity date

Declaration
public DateTime MaturityDate { get; }
Property Value
Type	Description
DateTime	
MaxLot
The highest trade allowed

Declaration
public double MaxLot { get; }
Property Value
Type	Description
double	
MinLot
The lowest trade allowed

Declaration
public double MinLot { get; }
Property Value
Type	Description
double	
MinVolumeAnalysisTickSize
Represent access to symbol information and properties.

Declaration
public double MinVolumeAnalysisTickSize { get; }
Property Value
Type	Description
double	
Name
Gets symbol name

Declaration
public string Name { get; protected set; }
Property Value
Type	Description
string	
NettingType
Gets symbol NettingType

Declaration
public NettingType NettingType { get; }
Property Value
Type	Description
NettingType	
NotionalValueStep
Step of the notional value changes

Declaration
public double NotionalValueStep { get; }
Property Value
Type	Description
double	
Open
Gets open price

Declaration
public double Open { get; }
Property Value
Type	Description
double	
OpenInterest
Represent access to symbol information and properties.

Declaration
public double OpenInterest { get; }
Property Value
Type	Description
double	
PrevClose
Gets previous close price

Declaration
public double PrevClose { get; }
Property Value
Type	Description
double	
Product
Gets symbol base Asset

Declaration
public Asset Product { get; protected set; }
Property Value
Type	Description
Asset	
QuoteAssetVolume
Gets quote asset volume value

Declaration
public double QuoteAssetVolume { get; }
Property Value
Type	Description
double	
QuoteDateTime
Gets quote time

Declaration
public DateTime QuoteDateTime { get; }
Property Value
Type	Description
DateTime	
QuoteDelay
Returns delay with which quote come in platform.

Declaration
public TimeSpan QuoteDelay { get; }
Property Value
Type	Description
TimeSpan	
QuotingCurrency
Gets symbol counter Asset

Declaration
public Asset QuotingCurrency { get; protected set; }
Property Value
Type	Description
Asset	
QuotingType
Gets current SymbolQuotingType

Declaration
public SymbolQuotingType QuotingType { get; }
Property Value
Type	Description
SymbolQuotingType	
Rho
Represent access to symbol information and properties.

Declaration
public double Rho { get; }
Property Value
Type	Description
double	
Root
Gets derivative underlier name

Declaration
public string Root { get; }
Property Value
Type	Description
string	
Spread
Gets spread value between Bid and Ask

Declaration
public double Spread { get; }
Property Value
Type	Description
double	
SpreadPercentage
Gets Spread percentage value

Declaration
public double SpreadPercentage { get; }
Property Value
Type	Description
double	
SymbolType
Gets symbol type

Declaration
public SymbolType SymbolType { get; }
Property Value
Type	Description
SymbolType	
Theta
Represent access to symbol information and properties.

Declaration
public double Theta { get; }
Property Value
Type	Description
double	
TickSize
Gets cached tick size if it available, else tries to obtain GetTickSize(double) with Last, Bid, Ask, first element of VariableTick list otherwise - DOUBLE_UNDEFINED

Declaration
public double TickSize { get; }
Property Value
Type	Description
double	
Ticks
Gets ticks amount

Declaration
public long Ticks { get; }
Property Value
Type	Description
long	
TopPriceLimit
Represent access to symbol information and properties.

Declaration
public double TopPriceLimit { get; }
Property Value
Type	Description
double	
TotalBuyQuantity
Represent access to symbol information and properties.

Declaration
public double TotalBuyQuantity { get; }
Property Value
Type	Description
double	
TotalSellQuantity
Represent access to symbol information and properties.

Declaration
public double TotalSellQuantity { get; }
Property Value
Type	Description
double	
Trades
Gets trades amount

Declaration
public long Trades { get; }
Property Value
Type	Description
long	
Underlier
Gets derivative underlier symbol

Declaration
public Symbol Underlier { get; }
Property Value
Type	Description
Symbol	
UnderlierId
Gets derivative underlier symbol id

Declaration
public string UnderlierId { get; }
Property Value
Type	Description
string	
UniqueKey
Represent access to symbol information and properties.

Declaration
public SymbolKey UniqueKey { get; }
Property Value
Type	Description
SymbolKey	
VariableTickList
Stores list of symbol ticksizes

Declaration
public List<VariableTick> VariableTickList { get; }
Property Value
Type	Description
List<VariableTick>	
Vega
Represent access to symbol information and properties.

Declaration
public double Vega { get; }
Property Value
Type	Description
double	
Volume
Gets volume value

Declaration
public double Volume { get; }
Property Value
Type	Description
double	
VolumeType
Gets SymbolVolumeType

Declaration
public SymbolVolumeType VolumeType { get; }
Property Value
Type	Description
SymbolVolumeType	
Methods
CalculatePrice(double, double)
Calculates new price which equal to given price shifted by a number of given ticks

Declaration
public double CalculatePrice(double price, double ticks)
Parameters
Type	Name	Description
double	price	
double	ticks	
Returns
Type	Description
double	
CalculateTicks(double, double)
Calculates ticks between two prices

Declaration
public double CalculateTicks(double price1, double price2)
Parameters
Type	Name	Description
double	price1	
double	price2	
Returns
Type	Description
double	
DetermineTickDirection(double, double, TickDirection)
Represent access to symbol information and properties.

Declaration
public static TickDirection DetermineTickDirection(double previousPrice, double currentPrice, TickDirection prevItemTickDirection)
Parameters
Type	Name	Description
double	previousPrice	
double	currentPrice	
TickDirection	prevItemTickDirection	
Returns
Type	Description
TickDirection	
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
Equals(Symbol)
Indicates whether the current object is equal to another object of the same type.

Declaration
public bool Equals(Symbol other)
Parameters
Type	Name	Description
Symbol	other	
An object to compare with this object.

Returns
Type	Description
bool	
true if the current object is equal to the other parameter; otherwise, false.

FindVariableTick(double)
Returns VariableTick if it can be retrived from VariableTick list by price or null

Declaration
public VariableTick FindVariableTick(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
VariableTick	
FormatOffset(double, string)
Returns string with formatted ticks value

Declaration
public string FormatOffset(double offset, string dimension = "ticks")
Parameters
Type	Name	Description
double	offset	
string	dimension	
Returns
Type	Description
string	
FormatPrice(double)
Formats price value to the appropriative string with a counting on tick precision.

Declaration
public string FormatPrice(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
string	
FormatPriceWithMaxPrecision(double)
Formats price value to the appropriative string with a counting on max tick precision.

Declaration
public string FormatPriceWithMaxPrecision(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
string	
FormatQuantity(double, bool, bool)
Represent access to symbol information and properties.

Declaration
public virtual string FormatQuantity(double quantity, bool inLots = true, bool abbreviate = false)
Parameters
Type	Name	Description
double	quantity	
bool	inLots	
bool	abbreviate	
Returns
Type	Description
string	
GetConnectionStateDependency()
Represent access to symbol information and properties.

Declaration
public virtual ConnectionDependency GetConnectionStateDependency()
Returns
Type	Description
ConnectionDependency	
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
GetHistory(HistoryAggregation, HistoryType, DateTime, DateTime)
Gets historical data according to aggregation and other parameters

Declaration
public HistoricalData GetHistory(HistoryAggregation aggregation, HistoryType historyType, DateTime fromTime, DateTime toTime = default)
Parameters
Type	Name	Description
HistoryAggregation	aggregation	
HistoryType	historyType	
DateTime	fromTime	
DateTime	toTime	
Returns
Type	Description
HistoricalData	
GetHistory(HistoryRequestParameters)
Gets historical data according to given history request

Declaration
public HistoricalData GetHistory(HistoryRequestParameters historyRequestParameters)
Parameters
Type	Name	Description
HistoryRequestParameters	historyRequestParameters	
Returns
Type	Description
HistoricalData	
GetHistory(Period, DateTime, DateTime)
Gets historical data according to period and other parameters

Declaration
public HistoricalData GetHistory(Period period, DateTime fromTime, DateTime toTime = default)
Parameters
Type	Name	Description
Period	period	
DateTime	fromTime	
DateTime	toTime	
Returns
Type	Description
HistoricalData	
GetHistory(Period, HistoryType, DateTime, DateTime)
Gets historical data according to period and other parameters

Declaration
public HistoricalData GetHistory(Period period, HistoryType historyType, DateTime fromTime, DateTime toTime = default)
Parameters
Type	Name	Description
Period	period	
HistoryType	historyType	
DateTime	fromTime	
DateTime	toTime	
Returns
Type	Description
HistoricalData	
GetMarginInfo(OrderRequestParameters)
Represent access to symbol information and properties.

Declaration
public MarginInfo GetMarginInfo(OrderRequestParameters orderRequestParameters)
Parameters
Type	Name	Description
OrderRequestParameters	orderRequestParameters	
Returns
Type	Description
MarginInfo	
GetTickCost(double)
Gets symbol tick cost retrived from the VariableTick list by price

Declaration
public double GetTickCost(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
double	
GetTickHistory(HistoryType, DateTime, DateTime)
Gets historical ticks data according to given parameters

Declaration
public HistoricalData GetTickHistory(HistoryType historyType, DateTime fromTime, DateTime toTime = default)
Parameters
Type	Name	Description
HistoryType	historyType	
DateTime	fromTime	
DateTime	toTime	
Returns
Type	Description
HistoricalData	
GetTickSize(double)
Gets cached symbol tick size or retrives it from the VariableTick list

Declaration
public double GetTickSize(double price)
Parameters
Type	Name	Description
double	price	
Returns
Type	Description
double	
IsTradingAllowed(Account)
Represent access to symbol information and properties.

Declaration
public virtual bool IsTradingAllowed(Account account)
Parameters
Type	Name	Description
Account	account	
Returns
Type	Description
bool	
OnConnectionStateChanged(Connection, ConnectionStateChangedEventArgs)
Represent access to symbol information and properties.

Declaration
public virtual void OnConnectionStateChanged(Connection connection, ConnectionStateChangedEventArgs e)
Parameters
Type	Name	Description
Connection	connection	
ConnectionStateChangedEventArgs	e	
RoundPriceToTickSize(double, double)
Returns rounded to TickSize price

Declaration
public double RoundPriceToTickSize(double price, double tickSize = NaN)
Parameters
Type	Name	Description
double	price	
double	tickSize	
Returns
Type	Description
double	
SubscribeAction(SubscribeQuoteType)
Represent access to symbol information and properties.

Declaration
protected virtual void SubscribeAction(SubscribeQuoteType type)
Parameters
Type	Name	Description
SubscribeQuoteType	type	
UnSubscribeAction(SubscribeQuoteType)
Represent access to symbol information and properties.

Declaration
protected virtual void UnSubscribeAction(SubscribeQuoteType type)
Parameters
Type	Name	Description
SubscribeQuoteType	type	
Events
NewDayBar
Will be triggered when new correctional quote is comming from the vendor.

Declaration
public event DayBarHandler NewDayBar
Event Type
Type	Description
DayBarHandler	
NewLast
Will be triggered when new trade quote is comming

Declaration
public event LastHandler NewLast
Event Type
Type	Description
LastHandler	
NewLevel2
Will be triggered when new Level2 quote is comming

Declaration
public event Level2Handler NewLevel2
Event Type
Type	Description
Level2Handler	
NewMark
Represent access to symbol information and properties.

Declaration
public event MarkHandler NewMark
Event Type
Type	Description
MarkHandler	
NewQuote
Will be triggered when new Level1 quote is comming

Declaration
public event QuoteHandler NewQuote
Event Type
Type	Description
QuoteHandler	
Updated
Will be triggered when symbol updated.

Declaration
public event SymbolUpdateHandler Updated
Event Type
Type	Description
SymbolUpdateHandler

Class SymbolGroup
Provides possibility to group and sort symbols for each connection

Namespace: TradingPlatform.BusinessLayer
Syntax
public class SymbolGroup : BusinessObject
Properties
GroupName
Gets group name

Declaration
public string GroupName { get; }
Property Value
Type	Description
string	
Id
Gets group Id

Declaration
public string Id { get; }
Property Value
Type	Description
string	
SortIndex
Gets sort index for comparing process

Declaration
public int SortIndex { get; }
Property Value
Type	Description
int	


Class Order
Represents trading information about pending order

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Order : TradingObject
Properties
AverageFillPrice
Represents trading information about pending order

Declaration
public double AverageFillPrice { get; }
Property Value
Type	Description
double	
ExpirationTime
Gets orders expiration time

Declaration
public DateTime ExpirationTime { get; }
Property Value
Type	Description
DateTime	
FilledQuantity
Filled quantity of the order

Declaration
public double FilledQuantity { get; }
Property Value
Type	Description
double	
GroupId
The ID of the order group. This group created when trades done by the MAM account.

Declaration
public string GroupId { get; }
Property Value
Type	Description
string	
LastUpdateTime
Gets orders last update time

Declaration
public DateTime LastUpdateTime { get; }
Property Value
Type	Description
DateTime	
OrderType
Gets OrderType

Declaration
public OrderType OrderType { get; }
Property Value
Type	Description
OrderType	
OrderTypeId
Orders Type Id. It is used for the orders type comparing.

Declaration
public string OrderTypeId { get; }
Property Value
Type	Description
string	
OriginalStatus
Gets open order original status

Declaration
public string OriginalStatus { get; }
Property Value
Type	Description
string	
PositionId
Gets Position Id.

Declaration
public string PositionId { get; }
Property Value
Type	Description
string	
Price
Gets order price value

Declaration
public double Price { get; }
Property Value
Type	Description
double	
RemainingQuantity
Remaining quantity of the order

Declaration
public double RemainingQuantity { get; }
Property Value
Type	Description
double	
Status
Gets orders current status

Declaration
public OrderStatus Status { get; }
Property Value
Type	Description
OrderStatus	
StopLoss
Gets StopLoss holder for given order

Declaration
public SlTpHolder StopLoss { get; }
Property Value
Type	Description
SlTpHolder	
StopLossItems
Represents trading information about pending order

Declaration
public SlTpHolder[] StopLossItems { get; }
Property Value
Type	Description
SlTpHolder[]	
TakeProfit
Gets TakeProfit holder for given order

Declaration
public SlTpHolder TakeProfit { get; }
Property Value
Type	Description
SlTpHolder	
TakeProfitItems
Represents trading information about pending order

Declaration
public SlTpHolder[] TakeProfitItems { get; }
Property Value
Type	Description
SlTpHolder[]	
TimeInForce
Gets order TIF(Time-In-Force) type

Declaration
public TimeInForce TimeInForce { get; }
Property Value
Type	Description
TimeInForce	
TotalQuantity
Total quantity of the order

Declaration
public double TotalQuantity { get; }
Property Value
Type	Description
double	
TrailOffset
Gets order trailing offset value

Declaration
public double TrailOffset { get; }
Property Value
Type	Description
double	
TriggerPrice
Gets order trigger price value

Declaration
public double TriggerPrice { get; }
Property Value
Type	Description
double	
Methods
BuildMessage()
Represents trading information about pending order

Declaration
public MessageOpenOrder BuildMessage()
Returns
Type	Description
MessageOpenOrder	
Cancel(string)
Cancels pending order

Declaration
public TradingOperationResult Cancel(string sendingSource = null)
Parameters
Type	Name	Description
string	sendingSource	
Returns
Type	Description
TradingOperationResult	
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
Equals(Order)
Indicates whether the current object is equal to another object of the same type.

Declaration
public bool Equals(Order other)
Parameters
Type	Name	Description
Order	other	
An object to compare with this object.

Returns
Type	Description
bool	
true if the current object is equal to the other parameter; otherwise, false.

GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Overrides
object.ToString()
Events
Updated
Will be triggered on each UpdateByMessage(MessageOpenOrder) invocation

Declaration
public event Action<IOrder> Updated
Event Type
Type	Description
Action<IOrder>

Class Position
Represents trading information about related position

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Position : TradingObject
Properties
CurrentPrice
The market price obtainable from your broker.

Declaration
public double CurrentPrice { get; }
Property Value
Type	Description
double	
Fee
Gets fee amount for the position.

Declaration
public PnLItem Fee { get; }
Property Value
Type	Description
PnLItem	
GrossPnL
Gets Profit/loss (without swaps or commissions) all calculated based on the current broker's price. For open position it shows the profit/loss you would make if you close the position at the current price. If position closed, this parameter show profit/loss what trader have after closing this position.

Declaration
public PnLItem GrossPnL { get; }
Property Value
Type	Description
PnLItem	
GrossPnLTicks
Returns ticks amount between open and current price.

Declaration
public double GrossPnLTicks { get; }
Property Value
Type	Description
double	
LiquidationPrice
Represents trading information about related position

Declaration
public double LiquidationPrice { get; }
Property Value
Type	Description
double	
NetPnL
Gets Profit/loss calculated based on the current broker's price. For open position it shows the profit/loss you would make if you close the position at the current price. If position closed, this parameter show profit/loss what trader have after closing this position.

Declaration
public PnLItem NetPnL { get; }
Property Value
Type	Description
PnLItem	
OpenPrice
Gets position open order price

Declaration
public double OpenPrice { get; }
Property Value
Type	Description
double	
OpenTime
Gets position openning time

Declaration
public DateTime OpenTime { get; }
Property Value
Type	Description
DateTime	
Quantity
Gets position quantity value

Declaration
public double Quantity { get; }
Property Value
Type	Description
double	
StopLoss
Gets StopLoss order which belongs to the position

Declaration
public Order StopLoss { get; }
Property Value
Type	Description
Order	
Swaps
Gets PnL swaps

Declaration
public PnLItem Swaps { get; }
Property Value
Type	Description
PnLItem	
TakeProfit
Gets TakeProfit order which belongs to the position

Declaration
public Order TakeProfit { get; }
Property Value
Type	Description
Order	
Methods
BuildMessage()
Represents trading information about related position

Declaration
public MessageOpenPosition BuildMessage()
Returns
Type	Description
MessageOpenPosition	
Close(double)
Closes position if quantity is not specified else - uses partial closing operation.

Declaration
public virtual TradingOperationResult Close(double closeQuantity = -1)
Parameters
Type	Name	Description
double	closeQuantity	
Returns
Type	Description
TradingOperationResult	
ForceRecalculatePnl()
Represents trading information about related position

Declaration
public void ForceRecalculatePnl()
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Overrides
object.ToString()
Events
Updated
Will be triggered on each UpdateByMessage(MessageOpenPosition) and UpdatePnl(PnL) invocation

Declaration
public event Action<Position> Updated
Event Type
Type	Description
Action<Position>

Class Trade
Represents information about trade.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Trade : TradingObject
Constructors
Trade(string)
Represents information about trade.

Declaration
public Trade(string connectionId)
Parameters
Type	Name	Description
string	connectionId	
Properties
DateTime
Get the date and time when trade was executed

Declaration
public DateTime DateTime { get; }
Property Value
Type	Description
DateTime	
Fee
Get the fee value that was charged for this trade

Declaration
public PnLItem Fee { get; }
Property Value
Type	Description
PnLItem	
GrossPnl
Get the trade Gross P&L

Declaration
public PnLItem GrossPnl { get; }
Property Value
Type	Description
PnLItem	
NetPnl
Get the trade Net P&L

Declaration
public PnLItem NetPnl { get; }
Property Value
Type	Description
PnLItem	
OrderId
Gets the unique identifier of the order initiating the trade.

Declaration
public string OrderId { get; }
Property Value
Type	Description
string	
OrderTypeId
Get the trade order type

Declaration
public string OrderTypeId { get; }
Property Value
Type	Description
string	
PositionId
Gets a unique identifier of the position, which is related to this trade.

Declaration
public string PositionId { get; }
Property Value
Type	Description
string	
PositionImpactType
Represents information about trade.

Declaration
public PositionImpactType PositionImpactType { get; }
Property Value
Type	Description
PositionImpactType	
Price
Get the price where trade was executed

Declaration
public double Price { get; }
Property Value
Type	Description
double	
Quantity
Get the trade quantity

Declaration
public double Quantity { get; }
Property Value
Type	Description
double	
Methods
BuildMessage()
Represents information about trade.

Declaration
public MessageTrade BuildMessage()
Returns
Type	Description
MessageTrade	
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Overrides
object.ToString()
Events
Updated
Will be triggered on trade updating

Declaration
public event Action Updated
Event Type
Type	Description
Action	

Class Quote
Represent access to quote information.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Quote : MessageQuote
Properties
Ask
Ask price

Declaration
public double Ask { get; set; }
Property Value
Type	Description
double	
AskSize
Ask size

Declaration
public double AskSize { get; set; }
Property Value
Type	Description
double	
AskTickDirection
Shows the direction of ask price movement, comparing to previous value.

Declaration
public TickDirection AskTickDirection { get; }
Property Value
Type	Description
TickDirection	
Bid
Bid price

Declaration
public double Bid { get; set; }
Property Value
Type	Description
double	
BidSize
Bid size

Declaration
public double BidSize { get; set; }
Property Value
Type	Description
double	
BidTickDirection
Shows the direction of bid price movement, comparing to previous value.

Declaration
public TickDirection BidTickDirection { get; }
Property Value
Type	Description
TickDirection	

Class Last
Represent access to trade information.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Last : MessageQuote
Properties
AggressorFlag
Information about operation side of the trade

Declaration
public AggressorFlag AggressorFlag { get; set; }
Property Value
Type	Description
AggressorFlag	
Buyer
Represent access to trade information.

Declaration
public string Buyer { get; set; }
Property Value
Type	Description
string	
OpenInterest
Represent access to trade information.

Declaration
public double OpenInterest { get; set; }
Property Value
Type	Description
double	
Price
Price at which trade occured

Declaration
public double Price { get; }
Property Value
Type	Description
double	
QuoteAssetVolume
Represent access to trade information.

Declaration
public double QuoteAssetVolume { get; set; }
Property Value
Type	Description
double	
Seller
Represent access to trade information.

Declaration
public string Seller { get; set; }
Property Value
Type	Description
string	
Size
Size of the trade

Declaration
public double Size { get; set; }
Property Value
Type	Description
double	
TickDirection
Shows the direction of price movement, comparing to previous value.

Declaration
public TickDirection TickDirection { get; }
Property Value
Type	Description
TickDirection	
TradeId
Represent access to trade information.

Declaration
public string TradeId { get; set; }
Property Value
Type	Description
string	

Class Level2Quote
Represent access to Level2 quote.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Level2Quote : MessageQuote
Properties
Broker
Broker identifier that send level2 quote

Declaration
public string Broker { get; set; }
Property Value
Type	Description
string	
Closed
Shows, whether Level2 quote is using only for removing from depth

Declaration
public bool Closed { get; set; }
Property Value
Type	Description
bool	
Id
Unique ID of Level2 quote

Declaration
public string Id { get; }
Property Value
Type	Description
string	
ImpliedSize
specifies the implied quantity associated with the price for the quote. Subtracting this amount from the Size yields the outright quantity for the price level. A value of zero indicates that the implied size is not available/defined or that it is actually zero.

Declaration
public double ImpliedSize { get; set; }
Property Value
Type	Description
double	
Price
Price of Level2 quote

Declaration
public double Price { get; }
Property Value
Type	Description
double	
PriceType
Price type of Level2 quote: Bid or Ask

Declaration
public QuotePriceType PriceType { get; }
Property Value
Type	Description
QuotePriceType	
Size
Size of Level2 quote

Declaration
public double Size { get; }
Property Value
Type	Description
double

Class DOMQuote
Represent access to DOM2 quote, which contains Bids and Asks.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class DOMQuote : MessageQuote
Properties
Asks
Collection of Asks quotes

Declaration
public List<Level2Quote> Asks { get; set; }
Property Value
Type	Description
List<Level2Quote>	
Bids
Collection of Bids quotes

Declaration
public List<Level2Quote> Bids { get; set; }
Property Value
Type	Description
List<Level2Quote>	


Class DayBar
Represent access to DayBar quote, which contains summary information about instrument prices.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class DayBar : MessageQuote
Properties
Ask
Ask price

Declaration
public double Ask { get; set; }
Property Value
Type	Description
double	
AskSize
Ask size

Declaration
public double AskSize { get; set; }
Property Value
Type	Description
double	
AverageTradedPrice
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double AverageTradedPrice { get; set; }
Property Value
Type	Description
double	
Bid
Bid price

Declaration
public double Bid { get; set; }
Property Value
Type	Description
double	
BidSize
Bid size

Declaration
public double BidSize { get; set; }
Property Value
Type	Description
double	
BottomPriceLimit
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double BottomPriceLimit { get; set; }
Property Value
Type	Description
double	
Change
Change value

Declaration
public double Change { get; set; }
Property Value
Type	Description
double	
ChangePercentage
Change value in percentage

Declaration
public double ChangePercentage { get; set; }
Property Value
Type	Description
double	
Delta
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double Delta { get; set; }
Property Value
Type	Description
double	
FundingRate
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double FundingRate { get; set; }
Property Value
Type	Description
double	
Gamma
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double Gamma { get; set; }
Property Value
Type	Description
double	
High
High price

Declaration
public double High { get; set; }
Property Value
Type	Description
double	
IV
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double IV { get; set; }
Property Value
Type	Description
double	
Last
Last price

Declaration
public double Last { get; set; }
Property Value
Type	Description
double	
LastSize
Last size

Declaration
public double LastSize { get; set; }
Property Value
Type	Description
double	
Low
Low price

Declaration
public double Low { get; set; }
Property Value
Type	Description
double	
Mark
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double Mark { get; set; }
Property Value
Type	Description
double	
MarkSize
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double MarkSize { get; set; }
Property Value
Type	Description
double	
Open
Open price

Declaration
public double Open { get; set; }
Property Value
Type	Description
double	
OpenInterest
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double OpenInterest { get; set; }
Property Value
Type	Description
double	
PrevSettlementPrice
Previous settlement price

Declaration
public double PrevSettlementPrice { get; set; }
Property Value
Type	Description
double	
PreviousClose
Previous Close price

Declaration
public double PreviousClose { get; set; }
Property Value
Type	Description
double	
QuoteAssetVolume
Volume value

Declaration
public double QuoteAssetVolume { get; set; }
Property Value
Type	Description
double	
Rho
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double Rho { get; set; }
Property Value
Type	Description
double	
Theta
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double Theta { get; set; }
Property Value
Type	Description
double	
Ticks
Ticks value

Declaration
public long Ticks { get; set; }
Property Value
Type	Description
long	
TopPriceLimit
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double TopPriceLimit { get; set; }
Property Value
Type	Description
double	
TotalBuyQuantity
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double TotalBuyQuantity { get; set; }
Property Value
Type	Description
double	
TotalSellQuantity
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double TotalSellQuantity { get; set; }
Property Value
Type	Description
double	
Trades
Trades value

Declaration
public long Trades { get; set; }
Property Value
Type	Description
long	
Vega
Represent access to DayBar quote, which contains summary information about instrument prices.

Declaration
public double Vega { get; set; }
Property Value
Type	Description
double	
Volume
Volume value

Declaration
public double Volume { get; set; }
Property Value
Type	Description
double	

Class HistoricalData
Represent access to historical data information and indicators control.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class HistoricalData
Constructors
HistoricalData(HistoryRequestParameters)
Represent access to historical data information and indicators control.

Declaration
protected HistoricalData(HistoryRequestParameters historyRequestParameters)
Parameters
Type	Name	Description
HistoryRequestParameters	historyRequestParameters	
Fields
Parameters
Represent access to historical data information and indicators control.

Declaration
protected HistoryRequestParameters Parameters
Field Value
Type	Description
HistoryRequestParameters	
itemsLocker
Represent access to historical data information and indicators control.

Declaration
protected readonly object itemsLocker
Field Value
Type	Description
object	
Properties
Aggregation
Gets HistoricalData aggregation

Declaration
public HistoryAggregation Aggregation { get; }
Property Value
Type	Description
HistoryAggregation	
AttachedIndicators
Gets array of attached indicators

Declaration
public Indicator[] AttachedIndicators { get; }
Property Value
Type	Description
Indicator[]	
BuiltInIndicators
Gets access to built-in indicators

Declaration
public BuiltInIndicators BuiltInIndicators { get; }
Property Value
Type	Description
BuiltInIndicators	
Count
Gets HistoricalData items amount

Declaration
public virtual int Count { get; }
Property Value
Type	Description
int	
FromTime
Gets HistoricalData left time boundary

Declaration
public DateTime FromTime { get; }
Property Value
Type	Description
DateTime	
HistoryType
Gets HistoricalData history type

Declaration
public HistoryType HistoryType { get; }
Property Value
Type	Description
HistoryType	
this[int, SeekOriginHistory]
Retrieves HistoricalData item by indexing offset and direction to find.

Declaration
public virtual IHistoryItem this[int offset, SeekOriginHistory origin = SeekOriginHistory.End] { get; }
Parameters
Type	Name	Description
int	offset	
SeekOriginHistory	origin	
Property Value
Type	Description
IHistoryItem	
NeedSubscribe
Represent access to historical data information and indicators control.

Declaration
protected virtual bool NeedSubscribe { get; }
Property Value
Type	Description
bool	
Period
Gets HistoricalData Period

Declaration
public Period Period { get; }
Property Value
Type	Description
Period	
Symbol
Gets HistoricalData symbol

Declaration
public Symbol Symbol { get; }
Property Value
Type	Description
Symbol	
ToTime
Gets HistoricalData right time boundary

Declaration
public DateTime ToTime { get; }
Property Value
Type	Description
DateTime	
Methods
AddIndicator(string, params SettingItem[])
Creates indicator by it's name and if it successfully created adds it to the HistoricalData

Declaration
public Indicator AddIndicator(string indicatorName, params SettingItem[] settings)
Parameters
Type	Name	Description
string	indicatorName	
SettingItem[]	settings	
Returns
Type	Description
Indicator	
AddIndicator(Indicator)
Adds indicator to the HistoricalData

Declaration
public void AddIndicator(Indicator indicator)
Parameters
Type	Name	Description
Indicator	indicator	
AddNewItem(IHistoryItem, bool, HistoryEventArgs)
Represent access to historical data information and indicators control.

Declaration
protected virtual void AddNewItem(IHistoryItem historyItem, bool updateIndicators = true, HistoryEventArgs e = null)
Parameters
Type	Name	Description
IHistoryItem	historyItem	
bool	updateIndicators	
HistoryEventArgs	e	
CalculateVolumeProfile(VolumeAnalysisCalculationParameters)
Represent access to historical data information and indicators control.

Declaration
public IVolumeAnalysisCalculationProgress CalculateVolumeProfile(VolumeAnalysisCalculationParameters volumeAnalysisCalculationParameters)
Parameters
Type	Name	Description
VolumeAnalysisCalculationParameters	volumeAnalysisCalculationParameters	
Returns
Type	Description
IVolumeAnalysisCalculationProgress	
CreateHistoryProcessor()
Represent access to historical data information and indicators control.

Declaration
protected virtual IHistoryProcessor CreateHistoryProcessor()
Returns
Type	Description
IHistoryProcessor	
GetEnumerator()
Returns an enumerator that iterates through a collection.

Declaration
public IEnumerator GetEnumerator()
Returns
Type	Description
IEnumerator	
An IEnumerator object that can be used to iterate through the collection.

GetIndexByTime(long, SeekOriginHistory)
Gets index by time with counting on search direction

Declaration
public double GetIndexByTime(long time, SeekOriginHistory origin = SeekOriginHistory.End)
Parameters
Type	Name	Description
long	time	
SeekOriginHistory	origin	
Returns
Type	Description
double	
GetTimeToNextBar()
Represent access to historical data information and indicators control.

Declaration
public string GetTimeToNextBar()
Returns
Type	Description
string	
ProcessLast(Last)
Represent access to historical data information and indicators control.

Declaration
protected virtual void ProcessLast(Last last)
Parameters
Type	Name	Description
Last	last	
ProcessLevel2Qute(MessageQuote)
Represent access to historical data information and indicators control.

Declaration
protected virtual void ProcessLevel2Qute(MessageQuote quote)
Parameters
Type	Name	Description
MessageQuote	quote	
ProcessMark(Mark)
Represent access to historical data information and indicators control.

Declaration
protected virtual void ProcessMark(Mark mark)
Parameters
Type	Name	Description
Mark	mark	
ProcessQuote(Quote)
Represent access to historical data information and indicators control.

Declaration
protected virtual void ProcessQuote(Quote quote)
Parameters
Type	Name	Description
Quote	quote	
Reload()
Reloads entire HistoricalData

Declaration
public void Reload()
RemoveIndicator(Indicator)
Removes indicator from the HistoricalData

Declaration
public void RemoveIndicator(Indicator indicator)
Parameters
Type	Name	Description
Indicator	indicator	
SubscribeSymbol()
Represent access to historical data information and indicators control.

Declaration
protected virtual void SubscribeSymbol()
Symbol_NewLast(Symbol, Last)
Represent access to historical data information and indicators control.

Declaration
protected void Symbol_NewLast(Symbol symbol, Last last)
Parameters
Type	Name	Description
Symbol	symbol	
Last	last	
Symbol_NewQuote(Symbol, Quote)
Represent access to historical data information and indicators control.

Declaration
protected void Symbol_NewQuote(Symbol symbol, Quote quote)
Parameters
Type	Name	Description
Symbol	symbol	
Quote	quote	
UnSubscribeSymbol()
Represent access to historical data information and indicators control.

Declaration
protected virtual void UnSubscribeSymbol()
Events
HistoryItemUpdated
Will be triggered when current historical item changed or updated

Declaration
public event HistoryEventHandler HistoryItemUpdated
Event Type
Type	Description
HistoryEventHandler	
HistoryItemVolumeAnalysisUpdated
Will be triggered when volume analysis of current historical item changed or updated

Declaration
public event Action HistoryItemVolumeAnalysisUpdated
Event Type
Type	Description
Action	
NewHistoryItem
Will be triggered when new historical item created

Declaration
public event HistoryEventHandler NewHistoryItem
Event Type
Type	Description
HistoryEventHandler

Class HistoryItemBar
Represents historical data bar item

Namespace: TradingPlatform.BusinessLayer
Syntax
public class HistoryItemBar : HistoryItem
Constructors
HistoryItemBar()
Creates HistoryItemBar instance with default OHLC price = DOUBLE_UNDEFINED

Declaration
public HistoryItemBar()
Properties
Close
Defines Close price

Declaration
public double Close { get; set; }
Property Value
Type	Description
double	
FundingRate
Represents historical data bar item

Declaration
public double FundingRate { get; set; }
Property Value
Type	Description
double	
High
Defines High price

Declaration
public double High { get; set; }
Property Value
Type	Description
double	
this[PriceType]
Gets price by indexing PriceType

Declaration
public override double this[PriceType priceType] { get; }
Parameters
Type	Name	Description
PriceType	priceType	
Property Value
Type	Description
double	
Overrides
HistoryItem.this[PriceType]
Low
Defines Low price

Declaration
public double Low { get; set; }
Property Value
Type	Description
double	
Median
Gets Median (High+Low)/2 price

Declaration
public double Median { get; }
Property Value
Type	Description
double	
Open
Defines Open price

Declaration
public double Open { get; set; }
Property Value
Type	Description
double	
OpenInterest
Represents historical data bar item

Declaration
public double OpenInterest { get; set; }
Property Value
Type	Description
double	
QuoteAssetVolume
Represents historical data bar item

Declaration
public double QuoteAssetVolume { get; set; }
Property Value
Type	Description
double	
Ticks
Defines ticks amount

Declaration
public long Ticks { get; set; }
Property Value
Type	Description
long	
TicksRight
Defines bar's ticks count

Declaration
public override long TicksRight { get; set; }
Property Value
Type	Description
long	
Overrides
HistoryItem.TicksRight
TimeRight
Gets bar's right time border

Declaration
public DateTime TimeRight { get; }
Property Value
Type	Description
DateTime	
Typical
Gets Typical (High+Low+Close)/3 price

Declaration
public double Typical { get; }
Property Value
Type	Description
double	
Volume
Defines volume value

Declaration
public double Volume { get; set; }
Property Value
Type	Description
double	
Weighted
Gets Weighted (High+Low+Close+Close)/4 price

Declaration
public double Weighted { get; }
Property Value
Type	Description
double	

Class HistoryItemLast
Represents historical data trade item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class HistoryItemLast : HistoryItem
Constructors
HistoryItemLast()
Creates HistoryItemLast instance

Declaration
public HistoryItemLast()
HistoryItemLast(Last)
Represents historical data trade item

Declaration
public HistoryItemLast(Last last)
Parameters
Type	Name	Description
Last	last	
Properties
AggressorFlag
Defines trade operation side as aggressor flag

Declaration
public AggressorFlag AggressorFlag { get; set; }
Property Value
Type	Description
AggressorFlag	
Buyer
Represents historical data trade item

Declaration
public string Buyer { get; set; }
Property Value
Type	Description
string	
FundingRate
Represents historical data trade item

Declaration
public double FundingRate { get; set; }
Property Value
Type	Description
double	
this[PriceType]
Gets price by indexing PriceType

Declaration
public override double this[PriceType priceType] { get; }
Parameters
Type	Name	Description
PriceType	priceType	
Property Value
Type	Description
double	
Overrides
HistoryItem.this[PriceType]
OpenInterest
Represents historical data trade item

Declaration
public double OpenInterest { get; set; }
Property Value
Type	Description
double	
Price
Defines price value

Declaration
public double Price { get; set; }
Property Value
Type	Description
double	
QuoteAssetVolume
Represents historical data trade item

Declaration
public double QuoteAssetVolume { get; set; }
Property Value
Type	Description
double	
Seller
Represents historical data trade item

Declaration
public string Seller { get; set; }
Property Value
Type	Description
string	
TickDirection
Represents historical data trade item

Declaration
public TickDirection TickDirection { get; set; }
Property Value
Type	Description
TickDirection	
Volume
Defines volume value

Declaration
public double Volume { get; set; }
Property Value
Type	Description
double	

Class HistoryItemTick
Represents historical data tick item

Namespace: TradingPlatform.BusinessLayer
Syntax
public class HistoryItemTick : HistoryItem
Constructors
HistoryItemTick()
Creates HistoryItemBar instance with default Ask/AskSize/Bid/BidSize = DOUBLE_UNDEFINED

Declaration
public HistoryItemTick()
Properties
Ask
Defines Ask price

Declaration
public double Ask { get; set; }
Property Value
Type	Description
double	
AskSize
Defines Ask size

Declaration
public double AskSize { get; set; }
Property Value
Type	Description
double	
AskTickDirection
Represents historical data tick item

Declaration
public TickDirection AskTickDirection { get; set; }
Property Value
Type	Description
TickDirection	
Bid
Defines Bid price

Declaration
public double Bid { get; set; }
Property Value
Type	Description
double	
BidSize
Defines Bid size

Declaration
public double BidSize { get; set; }
Property Value
Type	Description
double	
BidTickDirection
Represents historical data tick item

Declaration
public TickDirection BidTickDirection { get; set; }
Property Value
Type	Description
TickDirection	
this[PriceType]
Gets price by indexing PriceType

Declaration
public override double this[PriceType priceType] { get; }
Parameters
Type	Name	Description
PriceType	priceType	
Property Value
Type	Description
double	

Class HistoryAggregation
Namespace: TradingPlatform.BusinessLayer
Syntax
public abstract class HistoryAggregation
Constructors
HistoryAggregation()
Declaration
protected HistoryAggregation()
HistoryAggregation(HistoryAggregation)
Declaration
protected HistoryAggregation(HistoryAggregation _)
Parameters
Type	Name	Description
HistoryAggregation	_	
Fields
DOM_AGGREGATED
Declaration
public const string DOM_AGGREGATED = "Aggregated DOM"
Field Value
Type	Description
string	
DOM_BY_TICKS_COUNT
Declaration
public const string DOM_BY_TICKS_COUNT = "DOM by ticks count"
Field Value
Type	Description
string	
DOM_BY_TIME
Declaration
public const string DOM_BY_TIME = "DOM by time"
Field Value
Type	Description
string	
HEIKIN_ASHI
Declaration
public const string HEIKIN_ASHI = "Heikin Ashi"
Field Value
Type	Description
string	
KAGI
Declaration
public const string KAGI = "Kagi"
Field Value
Type	Description
string	
LEVEL2
Declaration
public const string LEVEL2 = "Level2"
Field Value
Type	Description
string	
LINE_BREAK
Declaration
public const string LINE_BREAK = "Line Break"
Field Value
Type	Description
string	
POINTS_AND_FIGURES
Declaration
public const string POINTS_AND_FIGURES = "Points & Figures"
Field Value
Type	Description
string	
POWER_TRADES
Declaration
public const string POWER_TRADES = "Power Trades"
Field Value
Type	Description
string	
RANGE_BARS
Declaration
public const string RANGE_BARS = "Range bars"
Field Value
Type	Description
string	
RENKO
Declaration
public const string RENKO = "Renko"
Field Value
Type	Description
string	
REVERSAL
Declaration
public const string REVERSAL = "Reversal"
Field Value
Type	Description
string	
SETTINGS_AGGREGATION_HISTORY_TYPE
Declaration
public const string SETTINGS_AGGREGATION_HISTORY_TYPE = "HistoryType"
Field Value
Type	Description
string	
SETTINGS_AGGREGATION_PERIOD
Declaration
public const string SETTINGS_AGGREGATION_PERIOD = "Period"
Field Value
Type	Description
string	
SETTINGS_AGGREGATION_SYMBOL
Declaration
public const string SETTINGS_AGGREGATION_SYMBOL = "Symbol"
Field Value
Type	Description
string	
TICK
Declaration
public const string TICK = "Tick"
Field Value
Type	Description
string	
TIME
Declaration
public const string TIME = "Time"
Field Value
Type	Description
string	
VOLUME
Declaration
public const string VOLUME = "Volume"
Field Value
Type	Description
string	
VWAP
Declaration
public const string VWAP = "VWAP"
Field Value
Type	Description
string	
Properties
DefaultRange
Declaration
public virtual Period DefaultRange { get; }
Property Value
Type	Description
Period	
Name
Declaration
public abstract string Name { get; }
Property Value
Type	Description
string	
Settings
Declaration
public virtual IList<SettingItem> Settings { get; set; }
Property Value
Type	Description
IList<SettingItem>	
Title
Declaration
public virtual string Title { get; }
Property Value
Type	Description
string	
Methods
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
Equals(HistoryAggregation)
Indicates whether the current object is equal to another object of the same type.

Declaration
public bool Equals(HistoryAggregation other)
Parameters
Type	Name	Description
HistoryAggregation	other	
An object to compare with this object.

Returns
Type	Description
bool	
true if the current object is equal to the other parameter; otherwise, false.

GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
TryGetPeriod(out Period)
Declaration
public virtual bool TryGetPeriod(out Period period)
Parameters
Type	Name	Description
Period	period	
Returns
Type	Description
bool	

Class HistoryAggregationTime
Namespace: TradingPlatform.BusinessLayer
Syntax
public class HistoryAggregationTime : HistoryAggregation
Constructors
HistoryAggregationTime(HistoryAggregationTime)
Declaration
protected HistoryAggregationTime(HistoryAggregationTime aggregation)
Parameters
Type	Name	Description
HistoryAggregationTime	aggregation	
HistoryAggregationTime(Period)
Declaration
public HistoryAggregationTime(Period period)
Parameters
Type	Name	Description
Period	period	
Properties
Name
Declaration
public override string Name { get; }
Property Value
Type	Description
string	
Overrides
HistoryAggregation.Name
Period
Declaration
public Period Period { get; set; }
Property Value
Type	Description
Period	
Settings
Declaration
public override IList<SettingItem> Settings { get; set; }
Property Value
Type	Description
IList<SettingItem>	
Overrides
HistoryAggregation.Settings
Methods
TryGetPeriod(out Period)
Declaration
public override bool TryGetPeriod(out Period period)
Parameters
Type	Name	Description
Period	period	
Returns
Type	Description
bool	

Class HistoryAggregationTick
Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class HistoryAggregationTick : HistoryAggregation
Constructors
HistoryAggregationTick(int)
Declaration
public HistoryAggregationTick(int ticksCount)
Parameters
Type	Name	Description
int	ticksCount	
HistoryAggregationTick(HistoryAggregationTick)
Declaration
public HistoryAggregationTick(HistoryAggregationTick aggregation)
Parameters
Type	Name	Description
HistoryAggregationTick	aggregation	
Properties
Name
Declaration
public override string Name { get; }
Property Value
Type	Description
string	
Overrides
HistoryAggregation.Name
Settings
Declaration
public override IList<SettingItem> Settings { get; set; }
Property Value
Type	Description
IList<SettingItem>	
Overrides
HistoryAggregation.Settings
TicksCount
Declaration
public int TicksCount { get; }
Property Value
Type	Description
int	
Methods
TryGetPeriod(out Period)
Declaration
public override bool TryGetPeriod(out Period period)
Parameters
Type	Name	Description
Period	period	
Returns
Type	Description
bool	
Overrides
HistoryAggregation.TryGetPeriod(out Period)

Struct Period
Represents mechanism for supporting predefined and custom periods

Namespace: TradingPlatform.BusinessLayer
Syntax
public struct Period
Constructors
Period(BasePeriod, int)
Creates Period instance with PeriodMultiplier greater than 0

Declaration
public Period(BasePeriod basePeriod, int periodMultiplier)
Parameters
Type	Name	Description
BasePeriod	basePeriod	
int	periodMultiplier	
Properties
BasePeriod
Gets base period type

Declaration
public readonly BasePeriod BasePeriod { get; }
Property Value
Type	Description
BasePeriod	
DAY1
Predefined period

Declaration
public static Period DAY1 { get; }
Property Value
Type	Description
Period	
Duration
Represents mechanism for supporting predefined and custom periods

Declaration
public TimeSpan Duration { get; }
Property Value
Type	Description
TimeSpan	
HOUR1
Predefined period

Declaration
public static Period HOUR1 { get; }
Property Value
Type	Description
Period	
HOUR12
Predefined period

Declaration
public static Period HOUR12 { get; }
Property Value
Type	Description
Period	
HOUR2
Predefined period

Declaration
public static Period HOUR2 { get; }
Property Value
Type	Description
Period	
HOUR3
Predefined period

Declaration
public static Period HOUR3 { get; }
Property Value
Type	Description
Period	
HOUR4
Predefined period

Declaration
public static Period HOUR4 { get; }
Property Value
Type	Description
Period	
HOUR6
Predefined period

Declaration
public static Period HOUR6 { get; }
Property Value
Type	Description
Period	
HOUR8
Predefined period

Declaration
public static Period HOUR8 { get; }
Property Value
Type	Description
Period	
MIN1
Predefined period

Declaration
public static Period MIN1 { get; }
Property Value
Type	Description
Period	
MIN10
Predefined period

Declaration
public static Period MIN10 { get; }
Property Value
Type	Description
Period	
MIN15
Predefined period

Declaration
public static Period MIN15 { get; }
Property Value
Type	Description
Period	
MIN2
Predefined period

Declaration
public static Period MIN2 { get; }
Property Value
Type	Description
Period	
MIN3
Predefined period

Declaration
public static Period MIN3 { get; }
Property Value
Type	Description
Period	
MIN30
Predefined period

Declaration
public static Period MIN30 { get; }
Property Value
Type	Description
Period	
MIN4
Predefined period

Declaration
public static Period MIN4 { get; }
Property Value
Type	Description
Period	
MIN5
Predefined period

Declaration
public static Period MIN5 { get; }
Property Value
Type	Description
Period	
MONTH1
Predefined period

Declaration
public static Period MONTH1 { get; }
Property Value
Type	Description
Period	
PeriodMultiplier
Gets period multiplier

Declaration
public readonly int PeriodMultiplier { get; }
Property Value
Type	Description
int	
SECOND1
Predefined period

Declaration
public static Period SECOND1 { get; }
Property Value
Type	Description
Period	
SECOND10
Predefined period

Declaration
public static Period SECOND10 { get; }
Property Value
Type	Description
Period	
SECOND15
Predefined period

Declaration
public static Period SECOND15 { get; }
Property Value
Type	Description
Period	
SECOND30
Predefined period

Declaration
public static Period SECOND30 { get; }
Property Value
Type	Description
Period	
SECOND5
Predefined period

Declaration
public static Period SECOND5 { get; }
Property Value
Type	Description
Period	
TICK1
Predefined period

Declaration
public static Period TICK1 { get; }
Property Value
Type	Description
Period	
Ticks
Gets ticks value as an result of base period TicksInBasePeriod(BasePeriod) multiplicated by PeriodMultiplier

Declaration
public long Ticks { get; }
Property Value
Type	Description
long	
WEEK1
Predefined period

Declaration
public static Period WEEK1 { get; }
Property Value
Type	Description
Period	
YEAR1
Predefined period

Declaration
public static Period YEAR1 { get; }
Property Value
Type	Description
Period	
Methods
BasePeriodToShortString(BasePeriod)
Returns shorted string according to base period type

Declaration
public static string BasePeriodToShortString(BasePeriod basePeriod)
Parameters
Type	Name	Description
BasePeriod	basePeriod	
Returns
Type	Description
string	
TicksInBasePeriod(BasePeriod)
Returns value in ticks according to base period type

Declaration
public static long TicksInBasePeriod(BasePeriod basePeriod)
Parameters
Type	Name	Description
BasePeriod	basePeriod	
Returns
Type	Description
long	
ToDatesRange(out DateTime, out DateTime)
Converts time gap into dates range

Declaration
public void ToDatesRange(out DateTime from, out DateTime to)
Parameters
Type	Name	Description
DateTime	from	
DateTime	to	
TryParse(string, out Period)
Represents mechanism for supporting predefined and custom periods

Declaration
public static bool TryParse(string value, out Period period)
Parameters
Type	Name	Description
string	value	
Period	period	
Returns
Type	Description
bool

Enum BasePeriod
Period that can be used as a basis for history aggregations

Namespace: TradingPlatform.BusinessLayer
Syntax
public enum BasePeriod
Fields
Name	Description
Day	
Period that can be used as a basis for history aggregations

Hour	
Period that can be used as a basis for history aggregations

Minute	
Period that can be used as a basis for history aggregations

Month	
Period that can be used as a basis for history aggregations

Second	
Period that can be used as a basis for history aggregations

Tick	
Period that can be used as a basis for history aggregations

Week	
Period that can be used as a basis for history aggregations

Year	
Period that can be used as a basis for history aggregations

Class DepthOfMarket
Represent access to level2 data.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class DepthOfMarket
Methods
GetDepthOfMarketAggregatedCollections(GetDepthOfMarketParameters)
Gets current Level2 data

Declaration
public DepthOfMarketAggregatedCollections GetDepthOfMarketAggregatedCollections(GetDepthOfMarketParameters parameters = null)
Parameters
Type	Name	Description
GetDepthOfMarketParameters	parameters	
Parameters of DepthOfMarket

Returns
Type	Description
DepthOfMarketAggregatedCollections	
GetDepthOfMarketAggregatedCollections(GetLevel2ItemsParameters)
Gets current Level2 data

Declaration
public DepthOfMarketAggregatedCollections GetDepthOfMarketAggregatedCollections(GetLevel2ItemsParameters parameters)
Parameters
Type	Name	Description
GetLevel2ItemsParameters	parameters	
Parameters of request for Leve2Item collection

Returns
Type	Description
DepthOfMarketAggregatedCollections	

Class DepthOfMarketAggregatedCollections
Leve2 data. Contains Bids and Ask collections

Namespace: TradingPlatform.BusinessLayer
Syntax
public class DepthOfMarketAggregatedCollections
Properties
Asks
Leve2 data. Contains Bids and Ask collections

Declaration
public Level2Item[] Asks { get; }
Property Value
Type	Description
Level2Item[]	
Bids
Leve2 data. Contains Bids and Ask collections

Declaration
public Level2Item[] Bids { get; }
Property Value
Type	Description
Level2Item[]	


Class DepthOfMarketAggregatedCollections
Leve2 data. Contains Bids and Ask collections

Namespace: TradingPlatform.BusinessLayer
Syntax
public class DepthOfMarketAggregatedCollections
Properties
Asks
Leve2 data. Contains Bids and Ask collections

Declaration
public Level2Item[] Asks { get; }
Property Value
Type	Description
Level2Item[]	
Bids
Leve2 data. Contains Bids and Ask collections

Declaration
public Level2Item[] Bids { get; }
Property Value
Type	Description
Level2Item[]	

Class GetDepthOfMarketParameters
Represent parameters of DepthOfMarket

Namespace: TradingPlatform.BusinessLayer
Syntax
public class GetDepthOfMarketParameters
Constructors
GetDepthOfMarketParameters()
Represent parameters of DepthOfMarket

Declaration
public GetDepthOfMarketParameters()
Properties
CalculateImbalancePercent
Represent parameters of DepthOfMarket

Declaration
public bool CalculateImbalancePercent { get; set; }
Property Value
Type	Description
bool	
GetLevel2ItemsParameters
Represent parameters of DepthOfMarket

Declaration
public GetLevel2ItemsParameters GetLevel2ItemsParameters { get; set; }
Property Value
Type	Description
GetLevel2ItemsParameters	
Methods
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
Operators
operator ==(GetDepthOfMarketParameters, GetDepthOfMarketParameters)
Represent parameters of DepthOfMarket

Declaration
public static bool operator ==(GetDepthOfMarketParameters p1, GetDepthOfMarketParameters p2)
Parameters
Type	Name	Description
GetDepthOfMarketParameters	p1	
GetDepthOfMarketParameters	p2	
Returns
Type	Description
bool	
operator !=(GetDepthOfMarketParameters, GetDepthOfMarketParameters)
Represent parameters of DepthOfMarket

Declaration
public static bool operator !=(GetDepthOfMarketParameters p1, GetDepthOfMarketParameters p2)
Parameters
Type	Name	Description
GetDepthOfMarketParameters	p1	
GetDepthOfMarketParameters	p2	
Returns
Type	Description
bool

Class GetLevel2ItemsParameters
Represent parameters of request for Leve2Item collection

Namespace: TradingPlatform.BusinessLayer
Syntax
public class GetLevel2ItemsParameters
Properties
AggregateMethod
Aggregation method

Declaration
public AggregateMethod AggregateMethod { get; set; }
Property Value
Type	Description
AggregateMethod	
CalculateCumulative
Calculate cumulative size

Declaration
public bool CalculateCumulative { get; set; }
Property Value
Type	Description
bool	
CustomTickSize
Use custom tick size

Declaration
public double CustomTickSize { get; set; }
Property Value
Type	Description
double	
GetMBOItems
Represent parameters of request for Leve2Item collection

Declaration
public bool GetMBOItems { get; set; }
Property Value
Type	Description
bool	
ImplicitOrderBookType
Represent parameters of request for Leve2Item collection

Declaration
public ImplicitOrderBookType ImplicitOrderBookType { get; set; }
Property Value
Type	Description
ImplicitOrderBookType	
LevelsCount
Required amount of level2

Declaration
public int LevelsCount { get; set; }
Property Value
Type	Description
int	
Methods
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
Operators
operator ==(GetLevel2ItemsParameters, GetLevel2ItemsParameters)
Represent parameters of request for Leve2Item collection

Declaration
public static bool operator ==(GetLevel2ItemsParameters p1, GetLevel2ItemsParameters p2)
Parameters
Type	Name	Description
GetLevel2ItemsParameters	p1	
GetLevel2ItemsParameters	p2	
Returns
Type	Description
bool	
operator !=(GetLevel2ItemsParameters, GetLevel2ItemsParameters)
Represent parameters of request for Leve2Item collection

Declaration
public static bool operator !=(GetLevel2ItemsParameters p1, GetLevel2ItemsParameters p2)
Parameters
Type	Name	Description
GetLevel2ItemsParameters	p1	
GetLevel2ItemsParameters	p2	
Returns
Type	Description
bool	

Class Level2Item
Represent access to level2 item.

Namespace: TradingPlatform.BusinessLayer
Syntax
public class Level2Item
Properties
Cumulative
Cumulative size

Declaration
public double Cumulative { get; }
Property Value
Type	Description
double	
DetailedLevels
Represent access to level2 item.

Declaration
public Level2Item[] DetailedLevels { get; set; }
Property Value
Type	Description
Level2Item[]	
ImbalancePercent
Imbalance Percent

Declaration
public double ImbalancePercent { get; }
Property Value
Type	Description
double	
MMID
MMID

Declaration
public string MMID { get; }
Property Value
Type	Description
string	
Price
Price

Declaration
public double Price { get; }
Property Value
Type	Description
double	
QuoteTime
Time

Declaration
public DateTime QuoteTime { get; }
Property Value
Type	Description
DateTime	
Size
Size

Declaration
public double Size { get; }
Property Value
Type	Description
double	
Methods
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Enum AggregateMethod
Aggregation method

Namespace: TradingPlatform.BusinessLayer
Syntax
public enum AggregateMethod
Fields
Name	Description
ByMMIDAndPrice	
Aggregation method

ByPriceLVL	
Aggregation method

None	
Aggregation method

Class HistoryRequestParameters
Resolves a history request parameters per symbol

Namespace: TradingPlatform.BusinessLayer
Syntax
public class HistoryRequestParameters : RequestParameters
Constructors
HistoryRequestParameters()
Resolves a history request parameters per symbol

Declaration
public HistoryRequestParameters()
HistoryRequestParameters(HistoryRequestParameters)
Resolves a history request parameters per symbol

Declaration
public HistoryRequestParameters(HistoryRequestParameters original)
Parameters
Type	Name	Description
HistoryRequestParameters	original	
Properties
Aggregation
Resolves a history request parameters per symbol

Declaration
public HistoryAggregation Aggregation { get; set; }
Property Value
Type	Description
HistoryAggregation	
Copy
Resolves a history request parameters per symbol

Declaration
public HistoryRequestParameters Copy { get; }
Property Value
Type	Description
HistoryRequestParameters	
ExcludeOutOfSession
Resolves a history request parameters per symbol

Declaration
public bool ExcludeOutOfSession { get; set; }
Property Value
Type	Description
bool	
ForceReload
Resolves a history request parameters per symbol

Declaration
public bool ForceReload { get; set; }
Property Value
Type	Description
bool	
FromTime
Resolves a history request parameters per symbol

Declaration
public DateTime FromTime { get; set; }
Property Value
Type	Description
DateTime	
HistoryType
Resolves a history request parameters per symbol

Declaration
public HistoryType HistoryType { get; set; }
Property Value
Type	Description
HistoryType	
Interval
Resolves a history request parameters per symbol

Declaration
public Interval<DateTime> Interval { get; set; }
Property Value
Type	Description
Interval<DateTime>	
Period
Resolves a history request parameters per symbol

Declaration
public Period Period { get; set; }
Property Value
Type	Description
Period	
ProgressInfo
Resolves a history request parameters per symbol

Declaration
public IProgress<float> ProgressInfo { get; set; }
Property Value
Type	Description
IProgress<float>	
SessionsContainer
Resolves a history request parameters per symbol

Declaration
public ISessionsContainer SessionsContainer { get; set; }
Property Value
Type	Description
ISessionsContainer	
Symbol
Resolves a history request parameters per symbol

Declaration
public Symbol Symbol { get; set; }
Property Value
Type	Description
Symbol	
SymbolId
Resolves a history request parameters per symbol

Declaration
public string SymbolId { get; set; }
Property Value
Type	Description
string	
ToTime
Resolves a history request parameters per symbol

Declaration
public DateTime ToTime { get; set; }
Property Value
Type	Description
DateTime	
Type
Resolves a history request parameters per symbol

Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type
UsePrevCloseAsOpenPriceBar
Resolves a history request parameters per symbol

Declaration
public bool UsePrevCloseAsOpenPriceBar { get; set; }
Property Value
Type	Description
bool	
Methods
ToDescription()
Resolves a history request parameters per symbol

Declaration
public HistoryDescription ToDescription()
Returns
Type	Description
HistoryDescription	

Class OrderRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public abstract class OrderRequestParameters : TradingRequestParameters
Constructors
OrderRequestParameters()
Declaration
protected OrderRequestParameters()
OrderRequestParameters(IOrder)
Declaration
protected OrderRequestParameters(IOrder order)
Parameters
Type	Name	Description
IOrder	order	
OrderRequestParameters(OrderRequestParameters)
Declaration
protected OrderRequestParameters(OrderRequestParameters origin)
Parameters
Type	Name	Description
OrderRequestParameters	origin	
Properties
Account
Declaration
public Account Account { get; set; }
Property Value
Type	Description
Account	
AccountId
Declaration
public string AccountId { get; set; }
Property Value
Type	Description
string	
AdditionalParameters
Declaration
public IList<SettingItem> AdditionalParameters { get; set; }
Property Value
Type	Description
IList<SettingItem>	
Comment
Declaration
public string Comment { get; set; }
Property Value
Type	Description
string	
ConnectionId
Declaration
public override string ConnectionId { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.ConnectionId
ExpirationTime
Declaration
public DateTime ExpirationTime { get; set; }
Property Value
Type	Description
DateTime	
GroupId
Declaration
public string GroupId { get; set; }
Property Value
Type	Description
string	
Message
Declaration
public override string Message { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Message
OrderType
Declaration
public OrderType OrderType { get; }
Property Value
Type	Description
OrderType	
OrderTypeId
Declaration
public string OrderTypeId { get; set; }
Property Value
Type	Description
string	
PositionId
Declaration
public string PositionId { get; set; }
Property Value
Type	Description
string	
Price
Declaration
public double Price { get; set; }
Property Value
Type	Description
double	
Quantity
Declaration
public double Quantity { get; set; }
Property Value
Type	Description
double	
QuantityDefinitionSettingName
Declaration
public string QuantityDefinitionSettingName { get; set; }
Property Value
Type	Description
string	
Side
Declaration
public Side Side { get; set; }
Property Value
Type	Description
Side	
Slippage
Declaration
public int Slippage { get; set; }
Property Value
Type	Description
int	
StopLoss
Declaration
public SlTpHolder StopLoss { get; set; }
Property Value
Type	Description
SlTpHolder	
StopLossItems
Declaration
public List<SlTpHolder> StopLossItems { get; }
Property Value
Type	Description
List<SlTpHolder>	
Symbol
Declaration
public Symbol Symbol { get; set; }
Property Value
Type	Description
Symbol	
SymbolId
Declaration
public string SymbolId { get; set; }
Property Value
Type	Description
string	
TakeProfit
Declaration
public SlTpHolder TakeProfit { get; set; }
Property Value
Type	Description
SlTpHolder	
TakeProfitItems
Declaration
public List<SlTpHolder> TakeProfitItems { get; }
Property Value
Type	Description
List<SlTpHolder>	
TimeInForce
Declaration
public TimeInForce TimeInForce { get; set; }
Property Value
Type	Description
TimeInForce	
Total
Declaration
public double Total { get; set; }
Property Value
Type	Description
double	
TrailOffset
Declaration
public double TrailOffset { get; set; }
Property Value
Type	Description
double	
TriggerPrice
Declaration
public double TriggerPrice { get; set; }
Property Value
Type	Description
double	
Methods
ApplyValuesFrom(OrderRequestParameters)
Declaration
public void ApplyValuesFrom(OrderRequestParameters other)
Parameters
Type	Name	Description
OrderRequestParameters	other	
Clone()
Creates a new object that is a copy of the current instance.

Declaration
public abstract object Clone()
Returns
Type	Description
object	
A new object that is a copy of this instance.

Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
Equals(OrderRequestParameters)
Indicates whether the current object is equal to another object of the same type.

Declaration
public bool Equals(OrderRequestParameters other)
Parameters
Type	Name	Description
OrderRequestParameters	other	
An object to compare with this object.

Returns
Type	Description
bool	
true if the current object is equal to the other parameter; otherwise, false.

FromXElement(XElement, DeserializationInfo)
Declaration
public void FromXElement(XElement element, DeserializationInfo deserializationInfo)
Parameters
Type	Name	Description
XElement	element	
DeserializationInfo	deserializationInfo	
GetAccount()
Declaration
protected override Account GetAccount()
Returns
Type	Description
Account	
Overrides
TradingRequestParameters.GetAccount()
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Overrides
object.GetHashCode()
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Overrides
object.ToString()
ToXElement()
Declaration
public XElement ToXElement()
Returns
Type	Description
XElement	
UpdateFrom(OrderRequestParameters)
Declaration
public void UpdateFrom(OrderRequestParameters origin)
Parameters
Type	Name	Description
OrderRequestParameters	origin

Class TradingRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public abstract class TradingRequestParameters : RequestParameters
Constructors
TradingRequestParameters()
Declaration
public TradingRequestParameters()
TradingRequestParameters(TradingRequestParameters)
Declaration
public TradingRequestParameters(TradingRequestParameters origin)
Parameters
Type	Name	Description
TradingRequestParameters	origin	
Properties
ConnectionId
Declaration
public abstract string ConnectionId { get; }
Property Value
Type	Description
string	
Event
Declaration
public abstract string Event { get; }
Property Value
Type	Description
string	
GroupOperation
Declaration
public object GroupOperation { get; init; }
Property Value
Type	Description
object	
Message
Declaration
public abstract string Message { get; }
Property Value
Type	Description
string	
SendingSource
Declaration
public string SendingSource { get; set; }
Property Value
Type	Description
string	
Methods
GetAccount()
Declaration
protected abstract Account GetAccount()
Returns
Type	Description
Account	

Class PlaceOrderRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public class PlaceOrderRequestParameters : OrderRequestParameters
Constructors
PlaceOrderRequestParameters()
Declaration
public PlaceOrderRequestParameters()
PlaceOrderRequestParameters(IOrder)
Declaration
public PlaceOrderRequestParameters(IOrder order)
Parameters
Type	Name	Description
IOrder	order	
PlaceOrderRequestParameters(OrderRequestParameters)
Declaration
public PlaceOrderRequestParameters(OrderRequestParameters original)
Parameters
Type	Name	Description
OrderRequestParameters	original	
Properties
Event
Declaration
public override string Event { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Event
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type
Methods
Clone()
Creates a new object that is a copy of the current instance.

Declaration
public override object Clone()
Returns
Type	Description
object	
A new object that is a copy of this instance.

Class ModifyOrderRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public class ModifyOrderRequestParameters : OrderRequestParameters
Constructors
ModifyOrderRequestParameters(IOrder)
Declaration
public ModifyOrderRequestParameters(IOrder order)
Parameters
Type	Name	Description
IOrder	order	
ModifyOrderRequestParameters(ModifyOrderRequestParameters)
Declaration
public ModifyOrderRequestParameters(ModifyOrderRequestParameters original)
Parameters
Type	Name	Description
ModifyOrderRequestParameters	original	
Properties
Event
Declaration
public override string Event { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Event
OrderId
Id of the order

Declaration
public string OrderId { get; set; }
Property Value
Type	Description
string	
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type
Methods
Clone()
Creates a new object that is a copy of the current instance.

Declaration
public override object Clone()
Returns
Type	Description
object	
A new object that is a copy of this instance.

Overrides
OrderRequestParameters.Clone()
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Class ClosePositionRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public class ClosePositionRequestParameters : TradingRequestParameters
Constructors
ClosePositionRequestParameters()
Declaration
public ClosePositionRequestParameters()
ClosePositionRequestParameters(ClosePositionRequestParameters)
Declaration
public ClosePositionRequestParameters(ClosePositionRequestParameters origin)
Parameters
Type	Name	Description
ClosePositionRequestParameters	origin	
Properties
CloseQuantity
Declaration
public double CloseQuantity { get; set; }
Property Value
Type	Description
double	
ConnectionId
Declaration
public override string ConnectionId { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.ConnectionId
Event
Declaration
public override string Event { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Event
Message
Declaration
public override string Message { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Message
Position
Declaration
public Position Position { get; set; }
Property Value
Type	Description
Position	
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type
Methods
GetAccount()
Declaration
protected override Account GetAccount()
Returns
Type	Description
Account	
Overrides
TradingRequestParameters.GetAccount()
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Class CancelOrderRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class CancelOrderRequestParameters : TradingRequestParameters
Constructors
CancelOrderRequestParameters()
Declaration
public CancelOrderRequestParameters()
CancelOrderRequestParameters(CancelOrderRequestParameters)
Declaration
public CancelOrderRequestParameters(CancelOrderRequestParameters original)
Parameters
Type	Name	Description
CancelOrderRequestParameters	original	
Properties
ConnectionId
Declaration
public override string ConnectionId { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.ConnectionId
Event
Declaration
public override string Event { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Event
Message
Declaration
public override string Message { get; }
Property Value
Type	Description
string	
Overrides
TradingRequestParameters.Message
Order
Declaration
public IOrder Order { get; set; }
Property Value
Type	Description
IOrder	
OrderId
Declaration
public string OrderId { get; set; }
Property Value
Type	Description
string	
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type
Methods
GetAccount()
Declaration
protected override Account GetAccount()
Returns
Type	Description
Account	
Overrides
TradingRequestParameters.GetAccount()
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Class RequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public abstract class RequestParameters
Constructors
RequestParameters()
Declaration
protected RequestParameters()
RequestParameters(RequestParameters)
Declaration
protected RequestParameters(RequestParameters origin)
Parameters
Type	Name	Description
RequestParameters	origin	
Properties
CancellationToken
Declaration
public CancellationToken CancellationToken { get; set; }
Property Value
Type	Description
CancellationToken	
RequestId
Declaration
public long RequestId { get; }
Property Value
Type	Description
long	
Type
Declaration
public abstract RequestType Type { get; }
Property Value
Type	Description
RequestType	
Class PnLRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public class PnLRequestParameters : RequestParameters
Constructors
PnLRequestParameters()
Declaration
public PnLRequestParameters()
PnLRequestParameters(PnLRequestParameters)
Declaration
public PnLRequestParameters(PnLRequestParameters original)
Parameters
Type	Name	Description
PnLRequestParameters	original	
Properties
Account
Declaration
public Account Account { get; set; }
Property Value
Type	Description
Account	
ClosePrice
Declaration
public double ClosePrice { get; set; }
Property Value
Type	Description
double	
OpenPrice
Declaration
public double OpenPrice { get; set; }
Property Value
Type	Description
double	
PositionId
Declaration
public string PositionId { get; set; }
Property Value
Type	Description
string	
Quantity
Declaration
public double Quantity { get; set; }
Property Value
Type	Description
double	
Side
Declaration
public Side Side { get; set; }
Property Value
Type	Description
Side	
Symbol
Declaration
public Symbol Symbol { get; set; }
Property Value
Type	Description
Symbol	
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	

Class ReportRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public class ReportRequestParameters : ProgressRequestParameters<float>
Constructors
ReportRequestParameters()
Declaration
public ReportRequestParameters()
ReportRequestParameters(ReportRequestParameters)
Declaration
public ReportRequestParameters(ReportRequestParameters origin)
Parameters
Type	Name	Description
ReportRequestParameters	origin	
Properties
ReportType
Declaration
public ReportType ReportType { get; set; }
Property Value
Type	Description
ReportType	
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type

Class GetSymbolRequestParameters
Namespace: TradingPlatform.BusinessLayer
Syntax
public class GetSymbolRequestParameters : CachedRequestParameters
Constructors
GetSymbolRequestParameters()
Declaration
public GetSymbolRequestParameters()
GetSymbolRequestParameters(GetSymbolRequestParameters)
Declaration
public GetSymbolRequestParameters(GetSymbolRequestParameters origin)
Parameters
Type	Name	Description
GetSymbolRequestParameters	origin	
Properties
SymbolId
Declaration
public string SymbolId { get; set; }
Property Value
Type	Description
string	
Type
Declaration
public override RequestType Type { get; }
Property Value
Type	Description
RequestType	
Overrides
RequestParameters.Type
Methods
GetCacheKey()
Declaration
public override int GetCacheKey()
Returns
Type	Description
int	


Class Connection
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class Connection
Properties
BusinessObjects
Provides access to all business objects which are belong to this connection

Declaration
public IBusinessObjectsProvider BusinessObjects { get; }
Property Value
Type	Description
IBusinessObjectsProvider	
ConnectingProgress
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public string ConnectingProgress { get; }
Property Value
Type	Description
string	
HistoryMetaData
Gets a matched available metadata info with the vendor's side

Declaration
public HistoryMetadata HistoryMetaData { get; }
Property Value
Type	Description
HistoryMetadata	
Id
Gets connection Id

Declaration
public string Id { get; }
Property Value
Type	Description
string	
Info
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public ConnectionInfo Info { get; }
Property Value
Type	Description
ConnectionInfo	
LastConnectionResult
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public ConnectionResult LastConnectionResult { get; }
Property Value
Type	Description
ConnectionResult	
MessagesQueueDepth
Messages count that one is waited to process

Declaration
public int MessagesQueueDepth { get; }
Property Value
Type	Description
int	
Name
Gets connection Name

Declaration
public string Name { get; set; }
Property Value
Type	Description
string	
NewsFeedSettings
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public IEnumerable<SettingItem> NewsFeedSettings { get; }
Property Value
Type	Description
IEnumerable<SettingItem>	
PingTime
Represents connection ping time

Declaration
public TimeSpan? PingTime { get; }
Property Value
Type	Description
TimeSpan?	
RoundTripTime
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public TimeSpan? RoundTripTime { get; }
Property Value
Type	Description
TimeSpan?	
ServerTime
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public DateTime ServerTime { get; }
Property Value
Type	Description
DateTime	
Settings
Contains list of connection settings. Will be reused on each population time.

Declaration
public IList<SettingItem> Settings { get; set; }
Property Value
Type	Description
IList<SettingItem>	
State
Gets connection's state (Connected/Connecting/Fail etc.)

Declaration
public ConnectionState State { get; }
Property Value
Type	Description
ConnectionState	
TotalSubscriptionsCount
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public int TotalSubscriptionsCount { get; }
Property Value
Type	Description
int	
TradesHistoryMetadata
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public TradesHistoryMetadata TradesHistoryMetadata { get; }
Property Value
Type	Description
TradesHistoryMetadata	
Type
Defines connection type

Declaration
public ConnectionType Type { get; set; }
Property Value
Type	Description
ConnectionType	
Uptime
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public TimeSpan Uptime { get; }
Property Value
Type	Description
TimeSpan	
VendorName
Gets connection's vendor name

Declaration
public string VendorName { get; }
Property Value
Type	Description
string	
VolumeAnalysisMetadata
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public VolumeAnalysisMetadata VolumeAnalysisMetadata { get; }
Property Value
Type	Description
VolumeAnalysisMetadata	
Methods
CompareTo(object)
Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.

Declaration
public int CompareTo(object obj)
Parameters
Type	Name	Description
object	obj	
An object to compare with this instance.

Returns
Type	Description
int	
A value that indicates the relative order of the objects being compared. The return value has these meanings:

Value	Meaning
Less than zero	This instance precedes obj in the sort order.
Zero	This instance occurs in the same position in the sort order as obj.
Greater than zero	This instance follows obj in the sort order.
Exceptions
Type	Condition
ArgumentException	
obj is not the same type as this instance.

Connect()
Establishes a connection to a specified vendor

Declaration
public ConnectionResult Connect()
Returns
Type	Description
ConnectionResult	
Disconnect()
Closes a connection.

Declaration
public void Disconnect()
GetNews(GetNewsRequestParameters)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public IEnumerable<NewsArticle> GetNews(GetNewsRequestParameters requestParameters)
Parameters
Type	Name	Description
GetNewsRequestParameters	requestParameters	
Returns
Type	Description
IEnumerable<NewsArticle>	
GetNewsArticleContent(GetNewsArticleContentRequestParameters)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public string GetNewsArticleContent(GetNewsArticleContentRequestParameters requestParameters)
Parameters
Type	Name	Description
GetNewsArticleContentRequestParameters	requestParameters	
Returns
Type	Description
string	
GetOrdersHistory(OrdersHistoryRequestParameters)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public IList<OrderHistory> GetOrdersHistory(OrdersHistoryRequestParameters parameters)
Parameters
Type	Name	Description
OrdersHistoryRequestParameters	parameters	
Returns
Type	Description
IList<OrderHistory>	
GetTrades(TradesHistoryRequestParameters)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public IList<Trade> GetTrades(TradesHistoryRequestParameters parameters)
Parameters
Type	Name	Description
TradesHistoryRequestParameters	parameters	
Returns
Type	Description
IList<Trade>	
SendCustomRequest(RequestParameters)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public void SendCustomRequest(RequestParameters parameters)
Parameters
Type	Name	Description
RequestParameters	parameters	
SubscribeNewsUpdates(SubscribeNewsRequestParameters, Action<NewsArticle>)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public void SubscribeNewsUpdates(SubscribeNewsRequestParameters subscribeNewsRequestParameters, Action<NewsArticle> updateAction)
Parameters
Type	Name	Description
SubscribeNewsRequestParameters	subscribeNewsRequestParameters	
Action<NewsArticle>	updateAction	
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Overrides
object.ToString()
UnsubscribeNewsUpdates(SubscribeNewsRequestParameters, Action<NewsArticle>)
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public void UnsubscribeNewsUpdates(SubscribeNewsRequestParameters subscribeNewsRequestParameters, Action<NewsArticle> updateAction)
Parameters
Type	Name	Description
SubscribeNewsRequestParameters	subscribeNewsRequestParameters	
Action<NewsArticle>	updateAction	
Events
ConnectingProgressChanged
Will be triggered when ConnectingProgress changed.

Declaration
public event EventHandler<ConnectionConnectingProgressChangedEventArgs> ConnectingProgressChanged
Event Type
Type	Description
EventHandler<ConnectionConnectingProgressChangedEventArgs>	
NewPerformedRequest
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public event EventHandler<PerformedRequestEventArgs> NewPerformedRequest
Event Type
Type	Description
EventHandler<PerformedRequestEventArgs>	
NewRequest
Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).

Declaration
public event EventHandler<RequestEventArgs> NewRequest
Event Type
Type	Description
EventHandler<RequestEventArgs>	
StateChanged
Will be triggered when State changed.

Declaration
public event EventHandler<ConnectionStateChangedEventArgs> StateChanged
Event Type
Type	Description
EventHandler<ConnectionStateChangedEventArgs>

Class ConnectionInfo
Represents all needed parameters for the connection constructing process.

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class ConnectionInfo
Properties
AllowCreateCustomConnections
Represents all needed parameters for the connection constructing process.

Declaration
public bool AllowCreateCustomConnections { get; }
Property Value
Type	Description
bool	
ConnectionId
Gets connection Id

Declaration
public string ConnectionId { get; }
Property Value
Type	Description
string	
ConnectionLogoPath
Represents all needed parameters for the connection constructing process.

Declaration
public string ConnectionLogoPath { get; }
Property Value
Type	Description
string	
ConnectionState
Gets ConnectionState

Declaration
public ConnectionState ConnectionState { get; }
Property Value
Type	Description
ConnectionState	
Copyrights
Represents all needed parameters for the connection constructing process.

Declaration
public string Copyrights { get; }
Property Value
Type	Description
string	
CreationType
Specifies how connection was created: by default or by user

Declaration
public ConnectionCreationType CreationType { get; }
Property Value
Type	Description
ConnectionCreationType	
Group
Gets connection group

Declaration
public string Group { get; }
Property Value
Type	Description
string	
IsFavourite
Favorites one will be displayed in Control center toolbar

Declaration
public bool IsFavourite { get; set; }
Property Value
Type	Description
bool	
Links
Represents all needed parameters for the connection constructing process.

Declaration
public List<ConnectionInfoLink> Links { get; }
Property Value
Type	Description
List<ConnectionInfoLink>	
Name
Gets a user friendly name of the connection

Declaration
public string Name { get; }
Property Value
Type	Description
string	
Settings
ICustomizable realization

Declaration
public IList<SettingItem> Settings { get; set; }
Property Value
Type	Description
IList<SettingItem>	
SyncMsgProcessing
Represents all needed parameters for the connection constructing process.

Declaration
public bool SyncMsgProcessing { get; set; }
Property Value
Type	Description
bool	
VendorInfo
Represents all needed parameters for the connection constructing process.

Declaration
public VendorInfo VendorInfo { get; }
Property Value
Type	Description
VendorInfo	
VendorName
Gets vendor's name

Declaration
public string VendorName { get; }
Property Value
Type	Description
string	
VendorSettings
Gets vendor's settings

Declaration
public IList<SettingItem> VendorSettings { get; }
Property Value
Type	Description
IList<SettingItem>	
Methods
CompareTo(object)
Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.

Declaration
public int CompareTo(object obj)
Parameters
Type	Name	Description
object	obj	
An object to compare with this instance.

Returns
Type	Description
int	
A value that indicates the relative order of the objects being compared. The return value has these meanings:

Value	Meaning
Less than zero	This instance precedes obj in the sort order.
Zero	This instance occurs in the same position in the sort order as obj.
Greater than zero	This instance follows obj in the sort order.
Exceptions
Type	Condition
ArgumentException	
obj is not the same type as this instance.

CompareTo(ConnectionInfo)
Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.

Declaration
public int CompareTo(ConnectionInfo other)
Parameters
Type	Name	Description
ConnectionInfo	other	
An object to compare with this instance.

Returns
Type	Description
int	
A value that indicates the relative order of the objects being compared. The return value has these meanings:

Value	Meaning
Less than zero	This instance precedes other in the sort order.
Zero	This instance occurs in the same position in the sort order as other.
Greater than zero	This instance follows other in the sort order.
Equals(object)
Determines whether the specified object is equal to the current object.

Declaration
public override bool Equals(object obj)
Parameters
Type	Name	Description
object	obj	
The object to compare with the current object.

Returns
Type	Description
bool	
true if the specified object is equal to the current object; otherwise, false.

Overrides
object.Equals(object)
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Class SettingItemAction
Typecasts setting as Button item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemAction : SettingItem
Constructors
SettingItemAction()
Typecasts setting as Button item

Declaration
public SettingItemAction()
SettingItemAction(string, SettingItemActionDelegate, int)
Typecasts setting as Button item

Declaration
public SettingItemAction(string name, SettingItemActionDelegate value, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
SettingItemActionDelegate	value	
int	sortIndex	
SettingItemAction(SettingItemAction)
Typecasts setting as Button item

Declaration
public SettingItemAction(SettingItemAction settingItem)
Parameters
Type	Name	Description
SettingItemAction	settingItem	
Properties
LabelText
Typecasts setting as Button item

Declaration
public string LabelText { get; set; }
Property Value
Type	Description
string	
Type
Typecasts setting as Button item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type
Methods
ValueFromXElement(XElement, DeserializationInfo)
Typecasts setting as Button item

Declaration
protected override void ValueFromXElement(XElement element, DeserializationInfo deserializationInfo)
Parameters
Type	Name	Description
XElement	element	
DeserializationInfo	deserializationInfo	
Overrides

Class SettingItemBoolean
Typecasts setting as CheckBox item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemBoolean : SettingItem
Constructors
SettingItemBoolean()
Typecasts setting as CheckBox item

Declaration
public SettingItemBoolean()
SettingItemBoolean(string, bool, int)
Typecasts setting as CheckBox item

Declaration
public SettingItemBoolean(string name, bool value, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
bool	value	
int	sortIndex	
Properties
Type
Typecasts setting as CheckBox item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type

Class SettingItemDouble
Typecasts setting as NumericUpDown item

Namespace: TradingPlatform.BusinessLayer
Syntax
public class SettingItemDouble : SettingItemNumber<double>
Constructors
SettingItemDouble()
Typecasts setting as NumericUpDown item

Declaration
public SettingItemDouble()
SettingItemDouble(string, double, int)
Typecasts setting as NumericUpDown item

Declaration
public SettingItemDouble(string name, double value, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
double	value	
int	sortIndex	
Properties
DecimalPlaces
Typecasts setting as NumericUpDown item

Declaration
[Bindable("decimalPlaces")]
public int DecimalPlaces { get; set; }
Property Value
Type	Description
int	
Type
Typecasts setting as NumericUpDown item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type
Methods
Equals(SettingItem)
Indicates whether the current object is equal to another object of the same type.

Declaration
public override bool Equals(SettingItem other)
Parameters
Type	Name	Description
SettingItem	other	
An object to compare with this object.

Returns
Type	Description
bool	
true if the current object is equal to the other parameter; otherwise, false.

Overrides
SettingItemNumber<double>.Equals(SettingItem)
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

lass SettingItemInteger
Typecasts setting as NumericUpDown item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemInteger : SettingItemNumber<int>
Constructors
SettingItemInteger()
Typecasts setting as NumericUpDown item

Declaration
public SettingItemInteger()
SettingItemInteger(string, int, int)
Typecasts setting as NumericUpDown item

Declaration
public SettingItemInteger(string name, int value, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
int	value	
int	sortIndex	
Properties
Type
Typecasts setting as NumericUpDown item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	

Class SettingItemGroup
Typecasts setting as TabControl item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemGroup : SettingItemList
Constructors
SettingItemGroup()
Typecasts setting as TabControl item

Declaration
public SettingItemGroup()
SettingItemGroup(string, IList<SettingItem>, int)
Typecasts setting as TabControl item

Declaration
public SettingItemGroup(string name, IList<SettingItem> items, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
IList<SettingItem>	items	
int	sortIndex	
Fields
AllowCreateEmptyGroup
Typecasts setting as TabControl item

Declaration
public bool AllowCreateEmptyGroup
Field Value
Type	Description
bool	
Properties
FirstActionInfo
Typecasts setting as TabControl item

Declaration
public GroupActionInfo FirstActionInfo { get; set; }
Property Value
Type	Description
GroupActionInfo	
Items
Typecasts setting as TabControl item

Declaration
protected override List<SettingItem> Items { get; set; }
Property Value
Type	Description
List<SettingItem>	
Overrides
SettingItemList.Items
SecondActionInfo
Typecasts setting as TabControl item

Declaration
public GroupActionInfo SecondActionInfo { get; set; }
Property Value
Type	Description
GroupActionInfo	
Type
Typecasts setting as TabControl item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type
Methods
AddItem(SettingItem)
Typecasts setting as TabControl item

Declaration
public void AddItem(SettingItem item)
Parameters
Type	Name	Description
SettingItem	item	
GetHashCode()
Serves as the default hash function.

Declaration
public override int GetHashCode()
Returns
Type	Description
int	
A hash code for the current object.

Class SettingItemPeriod
Typecasts setting as Period item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemPeriod : SettingItem
Constructors
SettingItemPeriod()
Typecasts setting as Period item

Declaration
public SettingItemPeriod()
SettingItemPeriod(string, Period, int)
Typecasts setting as Period item

Declaration
public SettingItemPeriod(string name, Period value, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
Period	value	
int	sortIndex	
Properties
ExcludedPeriods
Typecasts setting as Period item

Declaration
public BasePeriod[] ExcludedPeriods { get; set; }
Property Value
Type	Description
BasePeriod[]	
MultiplierMaximum
Typecasts setting as Period item

Declaration
public int MultiplierMaximum { get; set; }
Property Value
Type	Description
int	
MultiplierMinimum
Typecasts setting as Period item

Declaration
public int MultiplierMinimum { get; set; }
Property Value
Type	Description
int	
Type
Typecasts setting as Period item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type

Class SettingItemSelector
Typecasts setting as ComboBox item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemSelector : SettingItem
Constructors
SettingItemSelector()
Typecasts setting as ComboBox item

Declaration
public SettingItemSelector()
SettingItemSelector(string, string, IEnumerable<string>, int)
Typecasts setting as ComboBox item

Declaration
public SettingItemSelector(string name, string value, IEnumerable<string> items, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
string	value	
IEnumerable<string>	items	
int	sortIndex	
Properties
Items
Typecasts setting as ComboBox item

Declaration
[Bindable("items")]
public IEnumerable<string> Items { get; set; }
Property Value
Type	Description
IEnumerable<string>	
Type
Typecasts setting as ComboBox item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type

Class SettingItemSeparatorGroup
Typecasts setting as GroupBox item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemSeparatorGroup : SettingItemVisualGroup
Constructors
SettingItemSeparatorGroup(string, int)
Typecasts setting as GroupBox item

Declaration
public SettingItemSeparatorGroup(string text = "", int sortIndex = 0)
Parameters
Type	Name	Description
string	text	
int	sortIndex	
Properties
Key
Typecasts setting as GroupBox item

Declaration
public string Key { get; set; }
Property Value
Type	Description
string	


Class SettingItemString
Typecasts setting as TextBox item

Namespace: TradingPlatform.BusinessLayer
Syntax
public sealed class SettingItemString : SettingItem
Constructors
SettingItemString()
Typecasts setting as TextBox item

Declaration
public SettingItemString()
SettingItemString(string, string, int)
Typecasts setting as TextBox item

Declaration
public SettingItemString(string name, string value, int sortIndex = 0)
Parameters
Type	Name	Description
string	name	
string	value	
int	sortIndex	
Properties
ApplyOnEachInput
Typecasts setting as TextBox item

Declaration
public bool ApplyOnEachInput { get; set; }
Property Value
Type	Description
bool	
Type
Typecasts setting as TextBox item

Declaration
public override SettingItemType Type { get; }
Property Value
Type	Description
SettingItemType	
Overrides
SettingItem.Type

Enum PriceType
Namespace: TradingPlatform.BusinessLayer
Syntax
public enum PriceType
Fields
Name	Description
AggressorFlag	
Ask	
AskSize	
AskTickDirection	
Bid	
BidSize	
BidTickDirection	
Close	
FundingRate	
High	
Last	
Low	
Mark	
Median	
Open	
OpenInterest	
QuoteAssetVolume	
TickDirection	
Ticks	
Typical	
Volume	
Weighted

Class VolumeAnalysisManager
Volume Analysis calculations

Namespace: TradingPlatform.BusinessLayer
Syntax
public class VolumeAnalysisManager
Methods
CalculateProfile(HistoricalData)
Calculate volume profile for each bar in History Data

Declaration
public IVolumeAnalysisCalculationProgress CalculateProfile(HistoricalData historicalData)
Parameters
Type	Name	Description
HistoricalData	historicalData	
Returns
Type	Description
IVolumeAnalysisCalculationProgress	
CalculateProfile(HistoricalData, VolumeAnalysisCalculationParameters)
Calculate volume profile for each bar in History Data

Declaration
public IVolumeAnalysisCalculationProgress CalculateProfile(HistoricalData historicalData, VolumeAnalysisCalculationParameters calculationParameters)
Parameters
Type	Name	Description
HistoricalData	historicalData	
VolumeAnalysisCalculationParameters	calculationParameters	
Returns
Type	Description
IVolumeAnalysisCalculationProgress	
CalculateProfile(Symbol, DateTime, DateTime)
Calculate volume profile for requested time range

Declaration
public IVolumeAnalysisCalculationTask CalculateProfile(Symbol symbol, DateTime from, DateTime to)
Parameters
Type	Name	Description
Symbol	symbol	
DateTime	from	
DateTime	to	
Returns
Type	Description
IVolumeAnalysisCalculationTask	
CalculateProfile(VolumeAnalysisCalculationRequest)
Calculate volume profile for requested time range

Declaration
public IVolumeAnalysisCalculationTask CalculateProfile(VolumeAnalysisCalculationRequest request)
Parameters
Type	Name	Description
VolumeAnalysisCalculationRequest	request	
Returns
Type	Description
IVolumeAnalysisCalculationTask	

Class VolumeAnalysisData
Namespace: TradingPlatform.BusinessLayer
Syntax
public class VolumeAnalysisData
Constructors
VolumeAnalysisData()
Declaration
public VolumeAnalysisData()
Properties
PriceLevels
Volume info for each price

Declaration
public Dictionary<double, VolumeAnalysisItem> PriceLevels { get; set; }
Property Value
Type	Description
Dictionary<double, VolumeAnalysisItem>	
TimeLeft
Declaration
public DateTime TimeLeft { get; set; }
Property Value
Type	Description
DateTime	
Total
Summary calculated Volume info

Declaration
public VolumeAnalysisItem Total { get; set; }
Property Value
Type	Description
VolumeAnalysisItem	
Methods
Calculate(double, double, AggressorFlag)
Declaration
public void Calculate(double price, double size, AggressorFlag aggressorFlag)
Parameters
Type	Name	Description
double	price	
double	size	
AggressorFlag	aggressorFlag	
Combine(VolumeAnalysisData)
Declaration
public void Combine(VolumeAnalysisData data)
Parameters
Type	Name	Description
VolumeAnalysisData	data	
CreateAggregatedSnapshot(double)
Declaration
public VolumeAnalysisData CreateAggregatedSnapshot(double aggregationStep)
Parameters
Type	Name	Description
double	aggregationStep	
Returns
Type	Description
VolumeAnalysisData	
ToString()
Returns a string that represents the current object.

Declaration
public override string ToString()
Returns
Type	Description
string	
A string that represents the current object.

Overrides
object.ToString()
Events
ItemUpdated
Fire in case of price level was added or existing was updated

Declaration
public event EventHandler<VolumeAnalysisDataEventArgs> ItemUpdated
Event Type
Type	Description
EventHandler<VolumeAnalysisDataEventArgs>

Class VolumeAnalysisItem
Represent item with Volume Analysis calculation results

Namespace: TradingPlatform.BusinessLayer
Syntax
public class VolumeAnalysisItem
Constructors
VolumeAnalysisItem()
Represent item with Volume Analysis calculation results

Declaration
public VolumeAnalysisItem()
Properties
AverageBuySize
Represent item with Volume Analysis calculation results

Declaration
public double AverageBuySize { get; }
Property Value
Type	Description
double	
AverageSellSize
Represent item with Volume Analysis calculation results

Declaration
public double AverageSellSize { get; }
Property Value
Type	Description
double	
AverageSize
Represent item with Volume Analysis calculation results

Declaration
public double AverageSize { get; }
Property Value
Type	Description
double	
BuyTrades
Represent item with Volume Analysis calculation results

Declaration
public int BuyTrades { get; set; }
Property Value
Type	Description
int	
BuyVolume
Represent item with Volume Analysis calculation results

Declaration
public double BuyVolume { get; set; }
Property Value
Type	Description
double	
BuyVolumePercent
Represent item with Volume Analysis calculation results

Declaration
public double BuyVolumePercent { get; }
Property Value
Type	Description
double	
CumulativeDelta
Represent item with Volume Analysis calculation results

Declaration
public double CumulativeDelta { get; }
Property Value
Type	Description
double	
Delta
Represent item with Volume Analysis calculation results

Declaration
public double Delta { get; }
Property Value
Type	Description
double	
DeltaPercent
Represent item with Volume Analysis calculation results

Declaration
public double DeltaPercent { get; }
Property Value
Type	Description
double	
FilteredBuyVolume
Represent item with Volume Analysis calculation results

Declaration
public double FilteredBuyVolume { get; }
Property Value
Type	Description
double	
FilteredBuyVolumePercent
Represent item with Volume Analysis calculation results

Declaration
public double FilteredBuyVolumePercent { get; }
Property Value
Type	Description
double	
FilteredSellVolume
Represent item with Volume Analysis calculation results

Declaration
public double FilteredSellVolume { get; }
Property Value
Type	Description
double	
FilteredSellVolumePercent
Represent item with Volume Analysis calculation results

Declaration
public double FilteredSellVolumePercent { get; }
Property Value
Type	Description
double	
FilteredTotalVolume
Represent item with Volume Analysis calculation results

Declaration
public double FilteredTotalVolume { get; }
Property Value
Type	Description
double	
FilteredTotalVolumePercent
Represent item with Volume Analysis calculation results

Declaration
public double FilteredTotalVolumePercent { get; }
Property Value
Type	Description
double	
MaxDelta
Represent item with Volume Analysis calculation results

Declaration
public double MaxDelta { get; set; }
Property Value
Type	Description
double	
MaxOneTradeVolume
Represent item with Volume Analysis calculation results

Declaration
public double MaxOneTradeVolume { get; set; }
Property Value
Type	Description
double	
MaxOneTradeVolumePercent
Represent item with Volume Analysis calculation results

Declaration
public double MaxOneTradeVolumePercent { get; }
Property Value
Type	Description
double	
MinDelta
Represent item with Volume Analysis calculation results

Declaration
public double MinDelta { get; set; }
Property Value
Type	Description
double	
SellTrades
Represent item with Volume Analysis calculation results

Declaration
public int SellTrades { get; set; }
Property Value
Type	Description
int	
SellVolume
Represent item with Volume Analysis calculation results

Declaration
public double SellVolume { get; set; }
Property Value
Type	Description
double	
SellVolumePercent
Represent item with Volume Analysis calculation results

Declaration
public double SellVolumePercent { get; }
Property Value
Type	Description
double	
Trades
Represent item with Volume Analysis calculation results

Declaration
public int Trades { get; set; }
Property Value
Type	Description
int	
Volume
Represent item with Volume Analysis calculation results

Declaration
public double Volume { get; set; }
Property Value
Type	Description
double	
Methods
Combine(VolumeAnalysisItem)
Represent item with Volume Analysis calculation results

Declaration
public void Combine(VolumeAnalysisItem item)
Parameters
Type	Name	Description
VolumeAnalysisItem	item	
GetValue(VolumeAnalysisField)
Represent item with Volume Analysis calculation results

Declaration
public double GetValue(VolumeAnalysisField field)
Parameters
Type	Name	Description
VolumeAnalysisField	field	
Returns
Type	Description
double	

interface IVolumeAnalysisCalculationTask
Namespace: TradingPlatform.BusinessLayer
Syntax
public interface IVolumeAnalysisCalculationTask
Properties
Progress
Declaration
IVolumeAnalysisCalculationProgress Progress { get; }
Property Value
Type	Description
IVolumeAnalysisCalculationProgress	
Result
Declaration
VolumeAnalysisData Result { get; }
Property Value
Type	Description
VolumeAnalysisData

Interface IVolumeAnalysisCalculationProgress
Namespace: TradingPlatform.BusinessLayer
Syntax
public interface IVolumeAnalysisCalculationProgress
Properties
CalculationParameters
Declaration
VolumeAnalysisCalculationParameters CalculationParameters { get; }
Property Value
Type	Description
VolumeAnalysisCalculationParameters	
IsAborted
Declaration
bool IsAborted { get; }
Property Value
Type	Description
bool	
ProgressBarIndex
Declaration
int ProgressBarIndex { get; }
Property Value
Type	Description
int	
ProgressPercent
Declaration
int ProgressPercent { get; }
Property Value
Type	Description
int	
State
Declaration
VolumeAnalysisCalculationState State { get; }
Property Value
Type	Description
VolumeAnalysisCalculationState	
Methods
AbortLoading()
Declaration
void AbortLoading()
Wait(CancellationToken)
Declaration
void Wait(CancellationToken token = default)
Parameters
Type	Name	Description
CancellationToken	token	
Events
ProgressChanged
Declaration
event EventHandler<VolumeAnalysisTaskEventArgs> ProgressChanged
Event Type
Type	Description
EventHandler<VolumeAnalysisTaskEventArgs>	
StateChanged
Declaration
event EventHandler<VolumeAnalysisTaskEventArgs> StateChanged
Event Type
Type	Description
EventHandler<VolumeAnalysisTaskEventArgs>


Class VolumeAnalysisCalculationRequest
Provides VA calculation request per Symbol

Namespace: TradingPlatform.BusinessLayer
Syntax
public class VolumeAnalysisCalculationRequest : VolumeAnalysisCalculationParameters
Constructors
VolumeAnalysisCalculationRequest()
Provides VA calculation request per Symbol

Declaration
public VolumeAnalysisCalculationRequest()
Properties
From
Provides VA calculation request per Symbol

Declaration
public DateTime From { get; set; }
Property Value
Type	Description
DateTime	
Symbol
Provides VA calculation request per Symbol

Declaration
public Symbol Symbol { get; set; }
Property Value
Type	Description
Symbol	
To
Provides VA calculation request per Symbol

Declaration
public DateTime To { get; set; }
Property Value
Type	Description
DateTime	

Class VolumeAnalysisCalculationParameters
Provides VA calculation parameters

Namespace: TradingPlatform.BusinessLayer
Syntax
public class VolumeAnalysisCalculationParameters
Constructors
VolumeAnalysisCalculationParameters()
Provides VA calculation parameters

Declaration
public VolumeAnalysisCalculationParameters()
Properties
CalculatePriceLevels
Provides VA calculation parameters

Declaration
public bool CalculatePriceLevels { get; set; }
Property Value
Type	Description
bool	
CumulativeDeltaReset
Provides VA calculation parameters

Declaration
public CumulativeDeltaReset CumulativeDeltaReset { get; set; }
Property Value
Type	Description
CumulativeDeltaReset	
CustomStep
Provides VA calculation parameters

Declaration
public int CustomStep { get; set; }
Property Value
Type	Description
int	
CustomTickSize
Provides VA calculation parameters

Declaration
public double CustomTickSize { get; set; }
Property Value
Type	Description
double	
DeltaCalculationType
Provides VA calculation parameters

Declaration
public DeltaCalculationType DeltaCalculationType { get; set; }
Property Value
Type	Description
DeltaCalculationType	
FilteredVolume
Provides VA calculation parameters

Declaration
public double FilteredVolume { get; set; }
Property Value
Type	Description
double	
ForceReload
Provides VA calculation parameters

Declaration
public bool ForceReload { get; set; }
Property Value
Type	Description
bool	
SessionsContainer
Provides VA calculation parameters

Declaration
public ISessionsContainer SessionsContainer { get; set; }
Property Value
Type	Description
ISessionsContainer	
TimeZone
Provides VA calculation parameters

Declaration
public TimeZone TimeZone { get; set; }
Property Value
Type	Description
TimeZone

Class VolumeAnalysisDataEventArgs
Namespace: TradingPlatform.BusinessLayer
Syntax
public class VolumeAnalysisDataEventArgs : EventArgs
Properties
Item
Declaration
public VolumeAnalysisItem Item { get; }
Property Value
Type	Description
VolumeAnalysisItem	
Price
Declaration
public double Price { get; }
Property Value
Type	Description
double	

Enum VolumeAnalysisCalculationState
Namespace: TradingPlatform.BusinessLayer
Syntax
public enum VolumeAnalysisCalculationState
Fields
Name	Description
Finished	
None	
Processing

Enum VolumeAnalysisField
Namespace: TradingPlatform.BusinessLayer
Syntax
public enum VolumeAnalysisField
Fields
Name	Description
AverageBuySize	
AverageSellSize	
AverageSize	
BuySellVolume	
BuyTrades	
BuyVolume	
BuyVolumePercent	
CumulativeDelta	
Delta	
DeltaPercent	
FilteredBuyVolume	
FilteredBuyVolumePercent	
FilteredSellVolume	
FilteredSellVolumePercent	
FilteredTotalVolumePercent	
FilteredVolume	
MaxDelta	
MaxOneTradeVolume	
MaxOneTradeVolumePercent	
MinDelta	
OpenInterest	
SellTrades	
SellVolume	
SellVolumePercent	
Trades	
Volume